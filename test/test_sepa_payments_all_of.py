# coding: utf-8

"""
    easybill REST API

     The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.  # noqa: E501

    The version of the OpenAPI document: 1.48.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.sepa_payments_all_of import SEPAPaymentsAllOf  # noqa: E501
from openapi_client.rest import ApiException

class TestSEPAPaymentsAllOf(unittest.TestCase):
    """SEPAPaymentsAllOf unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test SEPAPaymentsAllOf
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.sepa_payments_all_of.SEPAPaymentsAllOf()  # noqa: E501
        if include_optional :
            return SEPAPaymentsAllOf(
                items = [
                    openapi_client.models.sepa_payment.SEPAPayment(
                        amount = 10000, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        creditor_bic = '0', 
                        creditor_iban = 'DE12345678901234567890', 
                        creditor_name = 'Easybill GmbH', 
                        debitor_bic = '0', 
                        debitor_iban = 'DE12345678901234567890', 
                        debitor_name = 'Easybill GmbH', 
                        document_id = 56, 
                        export_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        export_error = '0', 
                        id = 56, 
                        local_instrument = 'CORE', 
                        mandate_date_of_signature = 'Fri Feb 01 01:00:00 CET 2019', 
                        mandate_id = '001', 
                        reference = 'X000000001', 
                        remittance_information = '0', 
                        requested_at = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        sequence_type = 'FRST', 
                        updated_at = '2018-01-01 23:23:45', 
                        type = 'DEBIT', )
                    ]
            )
        else :
            return SEPAPaymentsAllOf(
        )

    def testSEPAPaymentsAllOf(self):
        """Test SEPAPaymentsAllOf"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
