# coding: utf-8

"""
    easybill REST API

     The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.  # noqa: E501

    The version of the OpenAPI document: 1.48.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DocumentRecurring(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'next_date': 'date',
        'frequency': 'str',
        'frequency_special': 'str',
        'interval': 'int',
        'end_date_or_count': 'str',
        'status': 'str',
        'as_draft': 'bool',
        'is_notify': 'bool',
        'send_as': 'str',
        'is_sign': 'bool',
        'is_paid': 'bool',
        'paid_date_option': 'str',
        'is_sepa': 'bool',
        'sepa_local_instrument': 'str',
        'sepa_sequence_type': 'str',
        'sepa_reference': 'str',
        'sepa_remittance_information': 'str'
    }

    attribute_map = {
        'next_date': 'next_date',
        'frequency': 'frequency',
        'frequency_special': 'frequency_special',
        'interval': 'interval',
        'end_date_or_count': 'end_date_or_count',
        'status': 'status',
        'as_draft': 'as_draft',
        'is_notify': 'is_notify',
        'send_as': 'send_as',
        'is_sign': 'is_sign',
        'is_paid': 'is_paid',
        'paid_date_option': 'paid_date_option',
        'is_sepa': 'is_sepa',
        'sepa_local_instrument': 'sepa_local_instrument',
        'sepa_sequence_type': 'sepa_sequence_type',
        'sepa_reference': 'sepa_reference',
        'sepa_remittance_information': 'sepa_remittance_information'
    }

    def __init__(self, next_date=None, frequency='MONTHLY', frequency_special='null', interval=None, end_date_or_count='null', status='WAITING', as_draft=False, is_notify=False, send_as='null', is_sign=False, is_paid=False, paid_date_option='created_date', is_sepa=False, sepa_local_instrument='null', sepa_sequence_type='null', sepa_reference='null', sepa_remittance_information='null', local_vars_configuration=None):  # noqa: E501
        """DocumentRecurring - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._next_date = None
        self._frequency = None
        self._frequency_special = None
        self._interval = None
        self._end_date_or_count = None
        self._status = None
        self._as_draft = None
        self._is_notify = None
        self._send_as = None
        self._is_sign = None
        self._is_paid = None
        self._paid_date_option = None
        self._is_sepa = None
        self._sepa_local_instrument = None
        self._sepa_sequence_type = None
        self._sepa_reference = None
        self._sepa_remittance_information = None
        self.discriminator = None

        self.next_date = next_date
        if frequency is not None:
            self.frequency = frequency
        self.frequency_special = frequency_special
        if interval is not None:
            self.interval = interval
        self.end_date_or_count = end_date_or_count
        if status is not None:
            self.status = status
        if as_draft is not None:
            self.as_draft = as_draft
        if is_notify is not None:
            self.is_notify = is_notify
        self.send_as = send_as
        if is_sign is not None:
            self.is_sign = is_sign
        if is_paid is not None:
            self.is_paid = is_paid
        if paid_date_option is not None:
            self.paid_date_option = paid_date_option
        if is_sepa is not None:
            self.is_sepa = is_sepa
        self.sepa_local_instrument = sepa_local_instrument
        self.sepa_sequence_type = sepa_sequence_type
        self.sepa_reference = sepa_reference
        self.sepa_remittance_information = sepa_remittance_information

    @property
    def next_date(self):
        """Gets the next_date of this DocumentRecurring.  # noqa: E501

        Must be in the future  # noqa: E501

        :return: The next_date of this DocumentRecurring.  # noqa: E501
        :rtype: date
        """
        return self._next_date

    @next_date.setter
    def next_date(self, next_date):
        """Sets the next_date of this DocumentRecurring.

        Must be in the future  # noqa: E501

        :param next_date: The next_date of this DocumentRecurring.  # noqa: E501
        :type: date
        """
        if self.local_vars_configuration.client_side_validation and next_date is None:  # noqa: E501
            raise ValueError("Invalid value for `next_date`, must not be `None`")  # noqa: E501

        self._next_date = next_date

    @property
    def frequency(self):
        """Gets the frequency of this DocumentRecurring.  # noqa: E501


        :return: The frequency of this DocumentRecurring.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this DocumentRecurring.


        :param frequency: The frequency of this DocumentRecurring.  # noqa: E501
        :type: str
        """
        allowed_values = ["DAILY", "WEEKLY", "MONTHLY", "YEARLY"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and frequency not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def frequency_special(self):
        """Gets the frequency_special of this DocumentRecurring.  # noqa: E501


        :return: The frequency_special of this DocumentRecurring.  # noqa: E501
        :rtype: str
        """
        return self._frequency_special

    @frequency_special.setter
    def frequency_special(self, frequency_special):
        """Sets the frequency_special of this DocumentRecurring.


        :param frequency_special: The frequency_special of this DocumentRecurring.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"LASTDAYOFMONTH"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and frequency_special not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `frequency_special` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency_special, allowed_values)
            )

        self._frequency_special = frequency_special

    @property
    def interval(self):
        """Gets the interval of this DocumentRecurring.  # noqa: E501


        :return: The interval of this DocumentRecurring.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this DocumentRecurring.


        :param interval: The interval of this DocumentRecurring.  # noqa: E501
        :type: int
        """

        self._interval = interval

    @property
    def end_date_or_count(self):
        """Gets the end_date_or_count of this DocumentRecurring.  # noqa: E501

        Date of last exectution day or number of times to exectute  # noqa: E501

        :return: The end_date_or_count of this DocumentRecurring.  # noqa: E501
        :rtype: str
        """
        return self._end_date_or_count

    @end_date_or_count.setter
    def end_date_or_count(self, end_date_or_count):
        """Sets the end_date_or_count of this DocumentRecurring.

        Date of last exectution day or number of times to exectute  # noqa: E501

        :param end_date_or_count: The end_date_or_count of this DocumentRecurring.  # noqa: E501
        :type: str
        """

        self._end_date_or_count = end_date_or_count

    @property
    def status(self):
        """Gets the status of this DocumentRecurring.  # noqa: E501


        :return: The status of this DocumentRecurring.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DocumentRecurring.


        :param status: The status of this DocumentRecurring.  # noqa: E501
        :type: str
        """
        allowed_values = ["RUNNING", "PAUSE", "STOP", "WAITING"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def as_draft(self):
        """Gets the as_draft of this DocumentRecurring.  # noqa: E501


        :return: The as_draft of this DocumentRecurring.  # noqa: E501
        :rtype: bool
        """
        return self._as_draft

    @as_draft.setter
    def as_draft(self, as_draft):
        """Sets the as_draft of this DocumentRecurring.


        :param as_draft: The as_draft of this DocumentRecurring.  # noqa: E501
        :type: bool
        """

        self._as_draft = as_draft

    @property
    def is_notify(self):
        """Gets the is_notify of this DocumentRecurring.  # noqa: E501


        :return: The is_notify of this DocumentRecurring.  # noqa: E501
        :rtype: bool
        """
        return self._is_notify

    @is_notify.setter
    def is_notify(self, is_notify):
        """Sets the is_notify of this DocumentRecurring.


        :param is_notify: The is_notify of this DocumentRecurring.  # noqa: E501
        :type: bool
        """

        self._is_notify = is_notify

    @property
    def send_as(self):
        """Gets the send_as of this DocumentRecurring.  # noqa: E501


        :return: The send_as of this DocumentRecurring.  # noqa: E501
        :rtype: str
        """
        return self._send_as

    @send_as.setter
    def send_as(self, send_as):
        """Sets the send_as of this DocumentRecurring.


        :param send_as: The send_as of this DocumentRecurring.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"EMAIL", "FAX", "POST"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and send_as not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `send_as` ({0}), must be one of {1}"  # noqa: E501
                .format(send_as, allowed_values)
            )

        self._send_as = send_as

    @property
    def is_sign(self):
        """Gets the is_sign of this DocumentRecurring.  # noqa: E501


        :return: The is_sign of this DocumentRecurring.  # noqa: E501
        :rtype: bool
        """
        return self._is_sign

    @is_sign.setter
    def is_sign(self, is_sign):
        """Sets the is_sign of this DocumentRecurring.


        :param is_sign: The is_sign of this DocumentRecurring.  # noqa: E501
        :type: bool
        """

        self._is_sign = is_sign

    @property
    def is_paid(self):
        """Gets the is_paid of this DocumentRecurring.  # noqa: E501


        :return: The is_paid of this DocumentRecurring.  # noqa: E501
        :rtype: bool
        """
        return self._is_paid

    @is_paid.setter
    def is_paid(self, is_paid):
        """Sets the is_paid of this DocumentRecurring.


        :param is_paid: The is_paid of this DocumentRecurring.  # noqa: E501
        :type: bool
        """

        self._is_paid = is_paid

    @property
    def paid_date_option(self):
        """Gets the paid_date_option of this DocumentRecurring.  # noqa: E501

        Option is used to determine what date is used for the payment if is_paid is true. \"next_valid_date\" selects the next workday in regards to the created date of the document if the date falls on a saturday or sunday.  # noqa: E501

        :return: The paid_date_option of this DocumentRecurring.  # noqa: E501
        :rtype: str
        """
        return self._paid_date_option

    @paid_date_option.setter
    def paid_date_option(self, paid_date_option):
        """Sets the paid_date_option of this DocumentRecurring.

        Option is used to determine what date is used for the payment if is_paid is true. \"next_valid_date\" selects the next workday in regards to the created date of the document if the date falls on a saturday or sunday.  # noqa: E501

        :param paid_date_option: The paid_date_option of this DocumentRecurring.  # noqa: E501
        :type: str
        """
        allowed_values = ["created_date", "due_date", "next_valid_date"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and paid_date_option not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `paid_date_option` ({0}), must be one of {1}"  # noqa: E501
                .format(paid_date_option, allowed_values)
            )

        self._paid_date_option = paid_date_option

    @property
    def is_sepa(self):
        """Gets the is_sepa of this DocumentRecurring.  # noqa: E501


        :return: The is_sepa of this DocumentRecurring.  # noqa: E501
        :rtype: bool
        """
        return self._is_sepa

    @is_sepa.setter
    def is_sepa(self, is_sepa):
        """Sets the is_sepa of this DocumentRecurring.


        :param is_sepa: The is_sepa of this DocumentRecurring.  # noqa: E501
        :type: bool
        """

        self._is_sepa = is_sepa

    @property
    def sepa_local_instrument(self):
        """Gets the sepa_local_instrument of this DocumentRecurring.  # noqa: E501


        :return: The sepa_local_instrument of this DocumentRecurring.  # noqa: E501
        :rtype: str
        """
        return self._sepa_local_instrument

    @sepa_local_instrument.setter
    def sepa_local_instrument(self, sepa_local_instrument):
        """Sets the sepa_local_instrument of this DocumentRecurring.


        :param sepa_local_instrument: The sepa_local_instrument of this DocumentRecurring.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"CORE", "COR1", "B2B"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and sepa_local_instrument not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `sepa_local_instrument` ({0}), must be one of {1}"  # noqa: E501
                .format(sepa_local_instrument, allowed_values)
            )

        self._sepa_local_instrument = sepa_local_instrument

    @property
    def sepa_sequence_type(self):
        """Gets the sepa_sequence_type of this DocumentRecurring.  # noqa: E501


        :return: The sepa_sequence_type of this DocumentRecurring.  # noqa: E501
        :rtype: str
        """
        return self._sepa_sequence_type

    @sepa_sequence_type.setter
    def sepa_sequence_type(self, sepa_sequence_type):
        """Sets the sepa_sequence_type of this DocumentRecurring.


        :param sepa_sequence_type: The sepa_sequence_type of this DocumentRecurring.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"FRST", "OOFF", "FNAL", "RCUR"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and sepa_sequence_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `sepa_sequence_type` ({0}), must be one of {1}"  # noqa: E501
                .format(sepa_sequence_type, allowed_values)
            )

        self._sepa_sequence_type = sepa_sequence_type

    @property
    def sepa_reference(self):
        """Gets the sepa_reference of this DocumentRecurring.  # noqa: E501


        :return: The sepa_reference of this DocumentRecurring.  # noqa: E501
        :rtype: str
        """
        return self._sepa_reference

    @sepa_reference.setter
    def sepa_reference(self, sepa_reference):
        """Sets the sepa_reference of this DocumentRecurring.


        :param sepa_reference: The sepa_reference of this DocumentRecurring.  # noqa: E501
        :type: str
        """

        self._sepa_reference = sepa_reference

    @property
    def sepa_remittance_information(self):
        """Gets the sepa_remittance_information of this DocumentRecurring.  # noqa: E501


        :return: The sepa_remittance_information of this DocumentRecurring.  # noqa: E501
        :rtype: str
        """
        return self._sepa_remittance_information

    @sepa_remittance_information.setter
    def sepa_remittance_information(self, sepa_remittance_information):
        """Sets the sepa_remittance_information of this DocumentRecurring.


        :param sepa_remittance_information: The sepa_remittance_information of this DocumentRecurring.  # noqa: E501
        :type: str
        """

        self._sepa_remittance_information = sepa_remittance_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentRecurring):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DocumentRecurring):
            return True

        return self.to_dict() != other.to_dict()
