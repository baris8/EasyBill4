# coding: utf-8

"""
    easybill REST API

     The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.  # noqa: E501

    The version of the OpenAPI document: 1.48.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Project(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'budget_amount': 'int',
        'budget_time': 'int',
        'customer_id': 'int',
        'hourly_rate': 'float',
        'id': 'int',
        'login_id': 'int',
        'name': 'str',
        'note': 'str',
        'status': 'str',
        'due_at': 'date',
        'consumed_time': 'int',
        'consumed_amount': 'int'
    }

    attribute_map = {
        'budget_amount': 'budget_amount',
        'budget_time': 'budget_time',
        'customer_id': 'customer_id',
        'hourly_rate': 'hourly_rate',
        'id': 'id',
        'login_id': 'login_id',
        'name': 'name',
        'note': 'note',
        'status': 'status',
        'due_at': 'due_at',
        'consumed_time': 'consumed_time',
        'consumed_amount': 'consumed_amount'
    }

    def __init__(self, budget_amount=None, budget_time=None, customer_id=None, hourly_rate=None, id=None, login_id=None, name=None, note='null', status='OPEN', due_at=None, consumed_time=None, consumed_amount=None, local_vars_configuration=None):  # noqa: E501
        """Project - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._budget_amount = None
        self._budget_time = None
        self._customer_id = None
        self._hourly_rate = None
        self._id = None
        self._login_id = None
        self._name = None
        self._note = None
        self._status = None
        self._due_at = None
        self._consumed_time = None
        self._consumed_amount = None
        self.discriminator = None

        if budget_amount is not None:
            self.budget_amount = budget_amount
        if budget_time is not None:
            self.budget_time = budget_time
        self.customer_id = customer_id
        if hourly_rate is not None:
            self.hourly_rate = hourly_rate
        if id is not None:
            self.id = id
        self.login_id = login_id
        self.name = name
        self.note = note
        if status is not None:
            self.status = status
        self.due_at = due_at
        if consumed_time is not None:
            self.consumed_time = consumed_time
        if consumed_amount is not None:
            self.consumed_amount = consumed_amount

    @property
    def budget_amount(self):
        """Gets the budget_amount of this Project.  # noqa: E501

        Project budget in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :return: The budget_amount of this Project.  # noqa: E501
        :rtype: int
        """
        return self._budget_amount

    @budget_amount.setter
    def budget_amount(self, budget_amount):
        """Sets the budget_amount of this Project.

        Project budget in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :param budget_amount: The budget_amount of this Project.  # noqa: E501
        :type: int
        """

        self._budget_amount = budget_amount

    @property
    def budget_time(self):
        """Gets the budget_time of this Project.  # noqa: E501

        Time budget in minutes (e.g. \"90\" = 1 hour and 30 minutes)  # noqa: E501

        :return: The budget_time of this Project.  # noqa: E501
        :rtype: int
        """
        return self._budget_time

    @budget_time.setter
    def budget_time(self, budget_time):
        """Sets the budget_time of this Project.

        Time budget in minutes (e.g. \"90\" = 1 hour and 30 minutes)  # noqa: E501

        :param budget_time: The budget_time of this Project.  # noqa: E501
        :type: int
        """

        self._budget_time = budget_time

    @property
    def customer_id(self):
        """Gets the customer_id of this Project.  # noqa: E501


        :return: The customer_id of this Project.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Project.


        :param customer_id: The customer_id of this Project.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def hourly_rate(self):
        """Gets the hourly_rate of this Project.  # noqa: E501

        Hourly rate in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :return: The hourly_rate of this Project.  # noqa: E501
        :rtype: float
        """
        return self._hourly_rate

    @hourly_rate.setter
    def hourly_rate(self, hourly_rate):
        """Sets the hourly_rate of this Project.

        Hourly rate in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :param hourly_rate: The hourly_rate of this Project.  # noqa: E501
        :type: float
        """

        self._hourly_rate = hourly_rate

    @property
    def id(self):
        """Gets the id of this Project.  # noqa: E501


        :return: The id of this Project.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.


        :param id: The id of this Project.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def login_id(self):
        """Gets the login_id of this Project.  # noqa: E501

        If omitted or null, the currently active login is used  # noqa: E501

        :return: The login_id of this Project.  # noqa: E501
        :rtype: int
        """
        return self._login_id

    @login_id.setter
    def login_id(self, login_id):
        """Sets the login_id of this Project.

        If omitted or null, the currently active login is used  # noqa: E501

        :param login_id: The login_id of this Project.  # noqa: E501
        :type: int
        """

        self._login_id = login_id

    @property
    def name(self):
        """Gets the name of this Project.  # noqa: E501


        :return: The name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def note(self):
        """Gets the note of this Project.  # noqa: E501


        :return: The note of this Project.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Project.


        :param note: The note of this Project.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def status(self):
        """Gets the status of this Project.  # noqa: E501


        :return: The status of this Project.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Project.


        :param status: The status of this Project.  # noqa: E501
        :type: str
        """
        allowed_values = ["OPEN", "DONE", "CANCEL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def due_at(self):
        """Gets the due_at of this Project.  # noqa: E501


        :return: The due_at of this Project.  # noqa: E501
        :rtype: date
        """
        return self._due_at

    @due_at.setter
    def due_at(self, due_at):
        """Sets the due_at of this Project.


        :param due_at: The due_at of this Project.  # noqa: E501
        :type: date
        """

        self._due_at = due_at

    @property
    def consumed_time(self):
        """Gets the consumed_time of this Project.  # noqa: E501


        :return: The consumed_time of this Project.  # noqa: E501
        :rtype: int
        """
        return self._consumed_time

    @consumed_time.setter
    def consumed_time(self, consumed_time):
        """Sets the consumed_time of this Project.


        :param consumed_time: The consumed_time of this Project.  # noqa: E501
        :type: int
        """

        self._consumed_time = consumed_time

    @property
    def consumed_amount(self):
        """Gets the consumed_amount of this Project.  # noqa: E501


        :return: The consumed_amount of this Project.  # noqa: E501
        :rtype: int
        """
        return self._consumed_amount

    @consumed_amount.setter
    def consumed_amount(self, consumed_amount):
        """Sets the consumed_amount of this Project.


        :param consumed_amount: The consumed_amount of this Project.  # noqa: E501
        :type: int
        """

        self._consumed_amount = consumed_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Project):
            return True

        return self.to_dict() != other.to_dict()
