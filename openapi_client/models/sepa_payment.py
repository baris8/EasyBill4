# coding: utf-8

"""
    easybill REST API

     The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.  # noqa: E501

    The version of the OpenAPI document: 1.48.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SEPAPayment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amount': 'int',
        'created_at': 'datetime',
        'creditor_bic': 'str',
        'creditor_iban': 'str',
        'creditor_name': 'str',
        'debitor_bic': 'str',
        'debitor_iban': 'str',
        'debitor_name': 'str',
        'document_id': 'int',
        'export_at': 'datetime',
        'export_error': 'str',
        'id': 'int',
        'local_instrument': 'str',
        'mandate_date_of_signature': 'date',
        'mandate_id': 'str',
        'reference': 'str',
        'remittance_information': 'str',
        'requested_at': 'date',
        'sequence_type': 'str',
        'updated_at': 'str',
        'type': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'created_at': 'created_at',
        'creditor_bic': 'creditor_bic',
        'creditor_iban': 'creditor_iban',
        'creditor_name': 'creditor_name',
        'debitor_bic': 'debitor_bic',
        'debitor_iban': 'debitor_iban',
        'debitor_name': 'debitor_name',
        'document_id': 'document_id',
        'export_at': 'export_at',
        'export_error': 'export_error',
        'id': 'id',
        'local_instrument': 'local_instrument',
        'mandate_date_of_signature': 'mandate_date_of_signature',
        'mandate_id': 'mandate_id',
        'reference': 'reference',
        'remittance_information': 'remittance_information',
        'requested_at': 'requested_at',
        'sequence_type': 'sequence_type',
        'updated_at': 'updated_at',
        'type': 'type'
    }

    def __init__(self, amount=None, created_at=None, creditor_bic='null', creditor_iban=None, creditor_name=None, debitor_bic='null', debitor_iban=None, debitor_name=None, document_id=None, export_at=None, export_error=None, id=None, local_instrument=None, mandate_date_of_signature=None, mandate_id=None, reference=None, remittance_information='null', requested_at=None, sequence_type=None, updated_at=None, type='DEBIT', local_vars_configuration=None):  # noqa: E501
        """SEPAPayment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._amount = None
        self._created_at = None
        self._creditor_bic = None
        self._creditor_iban = None
        self._creditor_name = None
        self._debitor_bic = None
        self._debitor_iban = None
        self._debitor_name = None
        self._document_id = None
        self._export_at = None
        self._export_error = None
        self._id = None
        self._local_instrument = None
        self._mandate_date_of_signature = None
        self._mandate_id = None
        self._reference = None
        self._remittance_information = None
        self._requested_at = None
        self._sequence_type = None
        self._updated_at = None
        self._type = None
        self.discriminator = None

        self.amount = amount
        if created_at is not None:
            self.created_at = created_at
        self.creditor_bic = creditor_bic
        self.creditor_iban = creditor_iban
        self.creditor_name = creditor_name
        self.debitor_bic = debitor_bic
        self.debitor_iban = debitor_iban
        self.debitor_name = debitor_name
        self.document_id = document_id
        self.export_at = export_at
        if export_error is not None:
            self.export_error = export_error
        if id is not None:
            self.id = id
        self.local_instrument = local_instrument
        self.mandate_date_of_signature = mandate_date_of_signature
        self.mandate_id = mandate_id
        self.reference = reference
        self.remittance_information = remittance_information
        if requested_at is not None:
            self.requested_at = requested_at
        self.sequence_type = sequence_type
        if updated_at is not None:
            self.updated_at = updated_at
        if type is not None:
            self.type = type

    @property
    def amount(self):
        """Gets the amount of this SEPAPayment.  # noqa: E501

        Amount in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :return: The amount of this SEPAPayment.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SEPAPayment.

        Amount in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :param amount: The amount of this SEPAPayment.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and amount is None:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def created_at(self):
        """Gets the created_at of this SEPAPayment.  # noqa: E501


        :return: The created_at of this SEPAPayment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SEPAPayment.


        :param created_at: The created_at of this SEPAPayment.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def creditor_bic(self):
        """Gets the creditor_bic of this SEPAPayment.  # noqa: E501

        If type is DEBIT, this field is overwritten with the selected bank account data on export.  # noqa: E501

        :return: The creditor_bic of this SEPAPayment.  # noqa: E501
        :rtype: str
        """
        return self._creditor_bic

    @creditor_bic.setter
    def creditor_bic(self, creditor_bic):
        """Sets the creditor_bic of this SEPAPayment.

        If type is DEBIT, this field is overwritten with the selected bank account data on export.  # noqa: E501

        :param creditor_bic: The creditor_bic of this SEPAPayment.  # noqa: E501
        :type: str
        """

        self._creditor_bic = creditor_bic

    @property
    def creditor_iban(self):
        """Gets the creditor_iban of this SEPAPayment.  # noqa: E501

        Mandatory if type is CREDIT. If type is DEBIT, this field is overwritten with the selected bank account data on export.  # noqa: E501

        :return: The creditor_iban of this SEPAPayment.  # noqa: E501
        :rtype: str
        """
        return self._creditor_iban

    @creditor_iban.setter
    def creditor_iban(self, creditor_iban):
        """Sets the creditor_iban of this SEPAPayment.

        Mandatory if type is CREDIT. If type is DEBIT, this field is overwritten with the selected bank account data on export.  # noqa: E501

        :param creditor_iban: The creditor_iban of this SEPAPayment.  # noqa: E501
        :type: str
        """

        self._creditor_iban = creditor_iban

    @property
    def creditor_name(self):
        """Gets the creditor_name of this SEPAPayment.  # noqa: E501

        Mandatory if type is CREDIT. If type is DEBIT, this field is overwritten with the selected bank account data on export.  # noqa: E501

        :return: The creditor_name of this SEPAPayment.  # noqa: E501
        :rtype: str
        """
        return self._creditor_name

    @creditor_name.setter
    def creditor_name(self, creditor_name):
        """Sets the creditor_name of this SEPAPayment.

        Mandatory if type is CREDIT. If type is DEBIT, this field is overwritten with the selected bank account data on export.  # noqa: E501

        :param creditor_name: The creditor_name of this SEPAPayment.  # noqa: E501
        :type: str
        """

        self._creditor_name = creditor_name

    @property
    def debitor_bic(self):
        """Gets the debitor_bic of this SEPAPayment.  # noqa: E501

        If type is CREDIT, this field is overwritten with the selected bank account data on export.  # noqa: E501

        :return: The debitor_bic of this SEPAPayment.  # noqa: E501
        :rtype: str
        """
        return self._debitor_bic

    @debitor_bic.setter
    def debitor_bic(self, debitor_bic):
        """Sets the debitor_bic of this SEPAPayment.

        If type is CREDIT, this field is overwritten with the selected bank account data on export.  # noqa: E501

        :param debitor_bic: The debitor_bic of this SEPAPayment.  # noqa: E501
        :type: str
        """

        self._debitor_bic = debitor_bic

    @property
    def debitor_iban(self):
        """Gets the debitor_iban of this SEPAPayment.  # noqa: E501

        Mandatory if type is DEBIT. If type is CREDIT, this field is overwritten with the selected bank account data on export.  # noqa: E501

        :return: The debitor_iban of this SEPAPayment.  # noqa: E501
        :rtype: str
        """
        return self._debitor_iban

    @debitor_iban.setter
    def debitor_iban(self, debitor_iban):
        """Sets the debitor_iban of this SEPAPayment.

        Mandatory if type is DEBIT. If type is CREDIT, this field is overwritten with the selected bank account data on export.  # noqa: E501

        :param debitor_iban: The debitor_iban of this SEPAPayment.  # noqa: E501
        :type: str
        """

        self._debitor_iban = debitor_iban

    @property
    def debitor_name(self):
        """Gets the debitor_name of this SEPAPayment.  # noqa: E501

        Mandatory if type is DEBIT. If type is CREDIT, this field is overwritten with the selected bank account data on export.  # noqa: E501

        :return: The debitor_name of this SEPAPayment.  # noqa: E501
        :rtype: str
        """
        return self._debitor_name

    @debitor_name.setter
    def debitor_name(self, debitor_name):
        """Sets the debitor_name of this SEPAPayment.

        Mandatory if type is DEBIT. If type is CREDIT, this field is overwritten with the selected bank account data on export.  # noqa: E501

        :param debitor_name: The debitor_name of this SEPAPayment.  # noqa: E501
        :type: str
        """

        self._debitor_name = debitor_name

    @property
    def document_id(self):
        """Gets the document_id of this SEPAPayment.  # noqa: E501


        :return: The document_id of this SEPAPayment.  # noqa: E501
        :rtype: int
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this SEPAPayment.


        :param document_id: The document_id of this SEPAPayment.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and document_id is None:  # noqa: E501
            raise ValueError("Invalid value for `document_id`, must not be `None`")  # noqa: E501

        self._document_id = document_id

    @property
    def export_at(self):
        """Gets the export_at of this SEPAPayment.  # noqa: E501

        If a date is set, this record is marked as exported  # noqa: E501

        :return: The export_at of this SEPAPayment.  # noqa: E501
        :rtype: datetime
        """
        return self._export_at

    @export_at.setter
    def export_at(self, export_at):
        """Sets the export_at of this SEPAPayment.

        If a date is set, this record is marked as exported  # noqa: E501

        :param export_at: The export_at of this SEPAPayment.  # noqa: E501
        :type: datetime
        """

        self._export_at = export_at

    @property
    def export_error(self):
        """Gets the export_error of this SEPAPayment.  # noqa: E501


        :return: The export_error of this SEPAPayment.  # noqa: E501
        :rtype: str
        """
        return self._export_error

    @export_error.setter
    def export_error(self, export_error):
        """Sets the export_error of this SEPAPayment.


        :param export_error: The export_error of this SEPAPayment.  # noqa: E501
        :type: str
        """

        self._export_error = export_error

    @property
    def id(self):
        """Gets the id of this SEPAPayment.  # noqa: E501


        :return: The id of this SEPAPayment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SEPAPayment.


        :param id: The id of this SEPAPayment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def local_instrument(self):
        """Gets the local_instrument of this SEPAPayment.  # noqa: E501

        CORE: SEPA Core Direct Debit<br/> COR1: SEPA-Basislastschrift COR1<br/> B2B: SEPA Business to Business Direct Debit  # noqa: E501

        :return: The local_instrument of this SEPAPayment.  # noqa: E501
        :rtype: str
        """
        return self._local_instrument

    @local_instrument.setter
    def local_instrument(self, local_instrument):
        """Sets the local_instrument of this SEPAPayment.

        CORE: SEPA Core Direct Debit<br/> COR1: SEPA-Basislastschrift COR1<br/> B2B: SEPA Business to Business Direct Debit  # noqa: E501

        :param local_instrument: The local_instrument of this SEPAPayment.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and local_instrument is None:  # noqa: E501
            raise ValueError("Invalid value for `local_instrument`, must not be `None`")  # noqa: E501
        allowed_values = ["CORE", "COR1", "B2B"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and local_instrument not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `local_instrument` ({0}), must be one of {1}"  # noqa: E501
                .format(local_instrument, allowed_values)
            )

        self._local_instrument = local_instrument

    @property
    def mandate_date_of_signature(self):
        """Gets the mandate_date_of_signature of this SEPAPayment.  # noqa: E501


        :return: The mandate_date_of_signature of this SEPAPayment.  # noqa: E501
        :rtype: date
        """
        return self._mandate_date_of_signature

    @mandate_date_of_signature.setter
    def mandate_date_of_signature(self, mandate_date_of_signature):
        """Sets the mandate_date_of_signature of this SEPAPayment.


        :param mandate_date_of_signature: The mandate_date_of_signature of this SEPAPayment.  # noqa: E501
        :type: date
        """
        if self.local_vars_configuration.client_side_validation and mandate_date_of_signature is None:  # noqa: E501
            raise ValueError("Invalid value for `mandate_date_of_signature`, must not be `None`")  # noqa: E501

        self._mandate_date_of_signature = mandate_date_of_signature

    @property
    def mandate_id(self):
        """Gets the mandate_id of this SEPAPayment.  # noqa: E501


        :return: The mandate_id of this SEPAPayment.  # noqa: E501
        :rtype: str
        """
        return self._mandate_id

    @mandate_id.setter
    def mandate_id(self, mandate_id):
        """Sets the mandate_id of this SEPAPayment.


        :param mandate_id: The mandate_id of this SEPAPayment.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and mandate_id is None:  # noqa: E501
            raise ValueError("Invalid value for `mandate_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                mandate_id is not None and len(mandate_id) > 34):
            raise ValueError("Invalid value for `mandate_id`, length must be less than or equal to `34`")  # noqa: E501

        self._mandate_id = mandate_id

    @property
    def reference(self):
        """Gets the reference of this SEPAPayment.  # noqa: E501


        :return: The reference of this SEPAPayment.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this SEPAPayment.


        :param reference: The reference of this SEPAPayment.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and reference is None:  # noqa: E501
            raise ValueError("Invalid value for `reference`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                reference is not None and len(reference) > 35):
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `35`")  # noqa: E501

        self._reference = reference

    @property
    def remittance_information(self):
        """Gets the remittance_information of this SEPAPayment.  # noqa: E501


        :return: The remittance_information of this SEPAPayment.  # noqa: E501
        :rtype: str
        """
        return self._remittance_information

    @remittance_information.setter
    def remittance_information(self, remittance_information):
        """Sets the remittance_information of this SEPAPayment.


        :param remittance_information: The remittance_information of this SEPAPayment.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                remittance_information is not None and len(remittance_information) > 140):
            raise ValueError("Invalid value for `remittance_information`, length must be less than or equal to `140`")  # noqa: E501

        self._remittance_information = remittance_information

    @property
    def requested_at(self):
        """Gets the requested_at of this SEPAPayment.  # noqa: E501

        Booking date  # noqa: E501

        :return: The requested_at of this SEPAPayment.  # noqa: E501
        :rtype: date
        """
        return self._requested_at

    @requested_at.setter
    def requested_at(self, requested_at):
        """Sets the requested_at of this SEPAPayment.

        Booking date  # noqa: E501

        :param requested_at: The requested_at of this SEPAPayment.  # noqa: E501
        :type: date
        """

        self._requested_at = requested_at

    @property
    def sequence_type(self):
        """Gets the sequence_type of this SEPAPayment.  # noqa: E501

        FRST: Erstlastschrift<br/> RCUR: Folgelastschrift<br/> OOFF: Einmallastschrift<br/> FNAL: Letztmalige Lastschrift  # noqa: E501

        :return: The sequence_type of this SEPAPayment.  # noqa: E501
        :rtype: str
        """
        return self._sequence_type

    @sequence_type.setter
    def sequence_type(self, sequence_type):
        """Sets the sequence_type of this SEPAPayment.

        FRST: Erstlastschrift<br/> RCUR: Folgelastschrift<br/> OOFF: Einmallastschrift<br/> FNAL: Letztmalige Lastschrift  # noqa: E501

        :param sequence_type: The sequence_type of this SEPAPayment.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and sequence_type is None:  # noqa: E501
            raise ValueError("Invalid value for `sequence_type`, must not be `None`")  # noqa: E501
        allowed_values = ["FRST", "OOFF", "FNAL", "RCUR"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and sequence_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `sequence_type` ({0}), must be one of {1}"  # noqa: E501
                .format(sequence_type, allowed_values)
            )

        self._sequence_type = sequence_type

    @property
    def updated_at(self):
        """Gets the updated_at of this SEPAPayment.  # noqa: E501


        :return: The updated_at of this SEPAPayment.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SEPAPayment.


        :param updated_at: The updated_at of this SEPAPayment.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def type(self):
        """Gets the type of this SEPAPayment.  # noqa: E501


        :return: The type of this SEPAPayment.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SEPAPayment.


        :param type: The type of this SEPAPayment.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEBIT", "CREDIT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SEPAPayment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SEPAPayment):
            return True

        return self.to_dict() != other.to_dict()
