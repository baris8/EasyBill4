# coding: utf-8

"""
    easybill REST API

     The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.  # noqa: E501

    The version of the OpenAPI document: 1.48.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Document(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address': 'DocumentAddress',
        'attachment_ids': 'list[int]',
        'label_address': 'DocumentAddress',
        'amount': 'int',
        'amount_net': 'int',
        'bank_debit_form': 'str',
        'billing_country': 'str',
        'calc_vat_from': 'int',
        'cancel_id': 'int',
        'cash_allowance': 'float',
        'cash_allowance_days': 'int',
        'cash_allowance_text': 'str',
        'contact_id': 'int',
        'contact_label': 'str',
        'contact_text': 'str',
        'created_at': 'datetime',
        'currency': 'str',
        'customer_id': 'int',
        'customer_snapshot': 'CustomerSnapshot',
        'discount': 'str',
        'discount_type': 'str',
        'document_date': 'date',
        'due_date': 'date',
        'edited_at': 'datetime',
        'external_id': 'str',
        'replica_url': 'str',
        'grace_period': 'int',
        'due_in_days': 'int',
        'id': 'int',
        'is_archive': 'bool',
        'is_draft': 'bool',
        'is_replica': 'bool',
        'items': 'list[DocumentPosition]',
        'last_postbox_id': 'int',
        'login_id': 'int',
        'number': 'str',
        'order_number': 'str',
        'paid_amount': 'int',
        'paid_at': 'date',
        'pdf_pages': 'int',
        'pdf_template': 'str',
        'project_id': 'int',
        'recurring_options': 'DocumentRecurring',
        'ref_id': 'int',
        'service_date': 'ServiceDate',
        'shipping_country': 'str',
        'status': 'str',
        'text': 'str',
        'text_prefix': 'str',
        'text_tax': 'str',
        'title': 'str',
        'type': 'str',
        'use_shipping_address': 'bool',
        'vat_country': 'str',
        'fulfillment_country': 'str',
        'vat_option': 'str'
    }

    attribute_map = {
        'address': 'address',
        'attachment_ids': 'attachment_ids',
        'label_address': 'label_address',
        'amount': 'amount',
        'amount_net': 'amount_net',
        'bank_debit_form': 'bank_debit_form',
        'billing_country': 'billing_country',
        'calc_vat_from': 'calc_vat_from',
        'cancel_id': 'cancel_id',
        'cash_allowance': 'cash_allowance',
        'cash_allowance_days': 'cash_allowance_days',
        'cash_allowance_text': 'cash_allowance_text',
        'contact_id': 'contact_id',
        'contact_label': 'contact_label',
        'contact_text': 'contact_text',
        'created_at': 'created_at',
        'currency': 'currency',
        'customer_id': 'customer_id',
        'customer_snapshot': 'customer_snapshot',
        'discount': 'discount',
        'discount_type': 'discount_type',
        'document_date': 'document_date',
        'due_date': 'due_date',
        'edited_at': 'edited_at',
        'external_id': 'external_id',
        'replica_url': 'replica_url',
        'grace_period': 'grace_period',
        'due_in_days': 'due_in_days',
        'id': 'id',
        'is_archive': 'is_archive',
        'is_draft': 'is_draft',
        'is_replica': 'is_replica',
        'items': 'items',
        'last_postbox_id': 'last_postbox_id',
        'login_id': 'login_id',
        'number': 'number',
        'order_number': 'order_number',
        'paid_amount': 'paid_amount',
        'paid_at': 'paid_at',
        'pdf_pages': 'pdf_pages',
        'pdf_template': 'pdf_template',
        'project_id': 'project_id',
        'recurring_options': 'recurring_options',
        'ref_id': 'ref_id',
        'service_date': 'service_date',
        'shipping_country': 'shipping_country',
        'status': 'status',
        'text': 'text',
        'text_prefix': 'text_prefix',
        'text_tax': 'text_tax',
        'title': 'title',
        'type': 'type',
        'use_shipping_address': 'use_shipping_address',
        'vat_country': 'vat_country',
        'fulfillment_country': 'fulfillment_country',
        'vat_option': 'vat_option'
    }

    def __init__(self, address=None, attachment_ids=None, label_address=None, amount=None, amount_net=None, bank_debit_form='null', billing_country=None, calc_vat_from=None, cancel_id=None, cash_allowance=None, cash_allowance_days=None, cash_allowance_text='null', contact_id=None, contact_label='', contact_text='', created_at=None, currency='EUR', customer_id=None, customer_snapshot=None, discount='null', discount_type='null', document_date=None, due_date=None, edited_at=None, external_id='null', replica_url='null', grace_period=None, due_in_days=None, id=None, is_archive=False, is_draft=None, is_replica=False, items=None, last_postbox_id=None, login_id=None, number='null', order_number='', paid_amount=None, paid_at=None, pdf_pages=None, pdf_template=None, project_id=None, recurring_options=None, ref_id=None, service_date=None, shipping_country='null', status='null', text=None, text_prefix=None, text_tax='null', title='null', type='INVOICE', use_shipping_address=False, vat_country='null', fulfillment_country='null', vat_option='null', local_vars_configuration=None):  # noqa: E501
        """Document - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._address = None
        self._attachment_ids = None
        self._label_address = None
        self._amount = None
        self._amount_net = None
        self._bank_debit_form = None
        self._billing_country = None
        self._calc_vat_from = None
        self._cancel_id = None
        self._cash_allowance = None
        self._cash_allowance_days = None
        self._cash_allowance_text = None
        self._contact_id = None
        self._contact_label = None
        self._contact_text = None
        self._created_at = None
        self._currency = None
        self._customer_id = None
        self._customer_snapshot = None
        self._discount = None
        self._discount_type = None
        self._document_date = None
        self._due_date = None
        self._edited_at = None
        self._external_id = None
        self._replica_url = None
        self._grace_period = None
        self._due_in_days = None
        self._id = None
        self._is_archive = None
        self._is_draft = None
        self._is_replica = None
        self._items = None
        self._last_postbox_id = None
        self._login_id = None
        self._number = None
        self._order_number = None
        self._paid_amount = None
        self._paid_at = None
        self._pdf_pages = None
        self._pdf_template = None
        self._project_id = None
        self._recurring_options = None
        self._ref_id = None
        self._service_date = None
        self._shipping_country = None
        self._status = None
        self._text = None
        self._text_prefix = None
        self._text_tax = None
        self._title = None
        self._type = None
        self._use_shipping_address = None
        self._vat_country = None
        self._fulfillment_country = None
        self._vat_option = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if attachment_ids is not None:
            self.attachment_ids = attachment_ids
        if label_address is not None:
            self.label_address = label_address
        if amount is not None:
            self.amount = amount
        if amount_net is not None:
            self.amount_net = amount_net
        self.bank_debit_form = bank_debit_form
        if billing_country is not None:
            self.billing_country = billing_country
        if calc_vat_from is not None:
            self.calc_vat_from = calc_vat_from
        if cancel_id is not None:
            self.cancel_id = cancel_id
        self.cash_allowance = cash_allowance
        self.cash_allowance_days = cash_allowance_days
        self.cash_allowance_text = cash_allowance_text
        self.contact_id = contact_id
        if contact_label is not None:
            self.contact_label = contact_label
        if contact_text is not None:
            self.contact_text = contact_text
        if created_at is not None:
            self.created_at = created_at
        if currency is not None:
            self.currency = currency
        self.customer_id = customer_id
        if customer_snapshot is not None:
            self.customer_snapshot = customer_snapshot
        self.discount = discount
        self.discount_type = discount_type
        if document_date is not None:
            self.document_date = document_date
        if due_date is not None:
            self.due_date = due_date
        if edited_at is not None:
            self.edited_at = edited_at
        self.external_id = external_id
        self.replica_url = replica_url
        self.grace_period = grace_period
        self.due_in_days = due_in_days
        if id is not None:
            self.id = id
        if is_archive is not None:
            self.is_archive = is_archive
        if is_draft is not None:
            self.is_draft = is_draft
        if is_replica is not None:
            self.is_replica = is_replica
        if items is not None:
            self.items = items
        if last_postbox_id is not None:
            self.last_postbox_id = last_postbox_id
        if login_id is not None:
            self.login_id = login_id
        self.number = number
        if order_number is not None:
            self.order_number = order_number
        if paid_amount is not None:
            self.paid_amount = paid_amount
        if paid_at is not None:
            self.paid_at = paid_at
        if pdf_pages is not None:
            self.pdf_pages = pdf_pages
        if pdf_template is not None:
            self.pdf_template = pdf_template
        self.project_id = project_id
        if recurring_options is not None:
            self.recurring_options = recurring_options
        self.ref_id = ref_id
        if service_date is not None:
            self.service_date = service_date
        self.shipping_country = shipping_country
        self.status = status
        if text is not None:
            self.text = text
        if text_prefix is not None:
            self.text_prefix = text_prefix
        self.text_tax = text_tax
        self.title = title
        if type is not None:
            self.type = type
        if use_shipping_address is not None:
            self.use_shipping_address = use_shipping_address
        self.vat_country = vat_country
        self.fulfillment_country = fulfillment_country
        self.vat_option = vat_option

    @property
    def address(self):
        """Gets the address of this Document.  # noqa: E501

        This information comes from the customer which can be set with customer_id.  # noqa: E501

        :return: The address of this Document.  # noqa: E501
        :rtype: DocumentAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Document.

        This information comes from the customer which can be set with customer_id.  # noqa: E501

        :param address: The address of this Document.  # noqa: E501
        :type: DocumentAddress
        """

        self._address = address

    @property
    def attachment_ids(self):
        """Gets the attachment_ids of this Document.  # noqa: E501


        :return: The attachment_ids of this Document.  # noqa: E501
        :rtype: list[int]
        """
        return self._attachment_ids

    @attachment_ids.setter
    def attachment_ids(self, attachment_ids):
        """Sets the attachment_ids of this Document.


        :param attachment_ids: The attachment_ids of this Document.  # noqa: E501
        :type: list[int]
        """

        self._attachment_ids = attachment_ids

    @property
    def label_address(self):
        """Gets the label_address of this Document.  # noqa: E501

        This information comes from the customer which can be set with customer_id.  # noqa: E501

        :return: The label_address of this Document.  # noqa: E501
        :rtype: DocumentAddress
        """
        return self._label_address

    @label_address.setter
    def label_address(self, label_address):
        """Sets the label_address of this Document.

        This information comes from the customer which can be set with customer_id.  # noqa: E501

        :param label_address: The label_address of this Document.  # noqa: E501
        :type: DocumentAddress
        """

        self._label_address = label_address

    @property
    def amount(self):
        """Gets the amount of this Document.  # noqa: E501

        Amount in cents  (e.g. \"150\" = 1.50€)  # noqa: E501

        :return: The amount of this Document.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Document.

        Amount in cents  (e.g. \"150\" = 1.50€)  # noqa: E501

        :param amount: The amount of this Document.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def amount_net(self):
        """Gets the amount_net of this Document.  # noqa: E501

        Amount in cents  (e.g. \"150\" = 1.50€)  # noqa: E501

        :return: The amount_net of this Document.  # noqa: E501
        :rtype: int
        """
        return self._amount_net

    @amount_net.setter
    def amount_net(self, amount_net):
        """Sets the amount_net of this Document.

        Amount in cents  (e.g. \"150\" = 1.50€)  # noqa: E501

        :param amount_net: The amount_net of this Document.  # noqa: E501
        :type: int
        """

        self._amount_net = amount_net

    @property
    def bank_debit_form(self):
        """Gets the bank_debit_form of this Document.  # noqa: E501


        :return: The bank_debit_form of this Document.  # noqa: E501
        :rtype: str
        """
        return self._bank_debit_form

    @bank_debit_form.setter
    def bank_debit_form(self, bank_debit_form):
        """Sets the bank_debit_form of this Document.


        :param bank_debit_form: The bank_debit_form of this Document.  # noqa: E501
        :type: str
        """

        self._bank_debit_form = bank_debit_form

    @property
    def billing_country(self):
        """Gets the billing_country of this Document.  # noqa: E501


        :return: The billing_country of this Document.  # noqa: E501
        :rtype: str
        """
        return self._billing_country

    @billing_country.setter
    def billing_country(self, billing_country):
        """Sets the billing_country of this Document.


        :param billing_country: The billing_country of this Document.  # noqa: E501
        :type: str
        """

        self._billing_country = billing_country

    @property
    def calc_vat_from(self):
        """Gets the calc_vat_from of this Document.  # noqa: E501

        0 === Net, 1 === Gross.  # noqa: E501

        :return: The calc_vat_from of this Document.  # noqa: E501
        :rtype: int
        """
        return self._calc_vat_from

    @calc_vat_from.setter
    def calc_vat_from(self, calc_vat_from):
        """Sets the calc_vat_from of this Document.

        0 === Net, 1 === Gross.  # noqa: E501

        :param calc_vat_from: The calc_vat_from of this Document.  # noqa: E501
        :type: int
        """

        self._calc_vat_from = calc_vat_from

    @property
    def cancel_id(self):
        """Gets the cancel_id of this Document.  # noqa: E501

        ID from the cancel document. Only for document type INVOICE.  # noqa: E501

        :return: The cancel_id of this Document.  # noqa: E501
        :rtype: int
        """
        return self._cancel_id

    @cancel_id.setter
    def cancel_id(self, cancel_id):
        """Sets the cancel_id of this Document.

        ID from the cancel document. Only for document type INVOICE.  # noqa: E501

        :param cancel_id: The cancel_id of this Document.  # noqa: E501
        :type: int
        """

        self._cancel_id = cancel_id

    @property
    def cash_allowance(self):
        """Gets the cash_allowance of this Document.  # noqa: E501


        :return: The cash_allowance of this Document.  # noqa: E501
        :rtype: float
        """
        return self._cash_allowance

    @cash_allowance.setter
    def cash_allowance(self, cash_allowance):
        """Sets the cash_allowance of this Document.


        :param cash_allowance: The cash_allowance of this Document.  # noqa: E501
        :type: float
        """

        self._cash_allowance = cash_allowance

    @property
    def cash_allowance_days(self):
        """Gets the cash_allowance_days of this Document.  # noqa: E501


        :return: The cash_allowance_days of this Document.  # noqa: E501
        :rtype: int
        """
        return self._cash_allowance_days

    @cash_allowance_days.setter
    def cash_allowance_days(self, cash_allowance_days):
        """Sets the cash_allowance_days of this Document.


        :param cash_allowance_days: The cash_allowance_days of this Document.  # noqa: E501
        :type: int
        """

        self._cash_allowance_days = cash_allowance_days

    @property
    def cash_allowance_text(self):
        """Gets the cash_allowance_text of this Document.  # noqa: E501


        :return: The cash_allowance_text of this Document.  # noqa: E501
        :rtype: str
        """
        return self._cash_allowance_text

    @cash_allowance_text.setter
    def cash_allowance_text(self, cash_allowance_text):
        """Sets the cash_allowance_text of this Document.


        :param cash_allowance_text: The cash_allowance_text of this Document.  # noqa: E501
        :type: str
        """

        self._cash_allowance_text = cash_allowance_text

    @property
    def contact_id(self):
        """Gets the contact_id of this Document.  # noqa: E501


        :return: The contact_id of this Document.  # noqa: E501
        :rtype: int
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this Document.


        :param contact_id: The contact_id of this Document.  # noqa: E501
        :type: int
        """

        self._contact_id = contact_id

    @property
    def contact_label(self):
        """Gets the contact_label of this Document.  # noqa: E501


        :return: The contact_label of this Document.  # noqa: E501
        :rtype: str
        """
        return self._contact_label

    @contact_label.setter
    def contact_label(self, contact_label):
        """Sets the contact_label of this Document.


        :param contact_label: The contact_label of this Document.  # noqa: E501
        :type: str
        """

        self._contact_label = contact_label

    @property
    def contact_text(self):
        """Gets the contact_text of this Document.  # noqa: E501


        :return: The contact_text of this Document.  # noqa: E501
        :rtype: str
        """
        return self._contact_text

    @contact_text.setter
    def contact_text(self, contact_text):
        """Sets the contact_text of this Document.


        :param contact_text: The contact_text of this Document.  # noqa: E501
        :type: str
        """

        self._contact_text = contact_text

    @property
    def created_at(self):
        """Gets the created_at of this Document.  # noqa: E501


        :return: The created_at of this Document.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Document.


        :param created_at: The created_at of this Document.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this Document.  # noqa: E501


        :return: The currency of this Document.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Document.


        :param currency: The currency of this Document.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def customer_id(self):
        """Gets the customer_id of this Document.  # noqa: E501


        :return: The customer_id of this Document.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Document.


        :param customer_id: The customer_id of this Document.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def customer_snapshot(self):
        """Gets the customer_snapshot of this Document.  # noqa: E501


        :return: The customer_snapshot of this Document.  # noqa: E501
        :rtype: CustomerSnapshot
        """
        return self._customer_snapshot

    @customer_snapshot.setter
    def customer_snapshot(self, customer_snapshot):
        """Sets the customer_snapshot of this Document.


        :param customer_snapshot: The customer_snapshot of this Document.  # noqa: E501
        :type: CustomerSnapshot
        """

        self._customer_snapshot = customer_snapshot

    @property
    def discount(self):
        """Gets the discount of this Document.  # noqa: E501


        :return: The discount of this Document.  # noqa: E501
        :rtype: str
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this Document.


        :param discount: The discount of this Document.  # noqa: E501
        :type: str
        """

        self._discount = discount

    @property
    def discount_type(self):
        """Gets the discount_type of this Document.  # noqa: E501


        :return: The discount_type of this Document.  # noqa: E501
        :rtype: str
        """
        return self._discount_type

    @discount_type.setter
    def discount_type(self, discount_type):
        """Sets the discount_type of this Document.


        :param discount_type: The discount_type of this Document.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"PERCENT", "AMOUNT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and discount_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `discount_type` ({0}), must be one of {1}"  # noqa: E501
                .format(discount_type, allowed_values)
            )

        self._discount_type = discount_type

    @property
    def document_date(self):
        """Gets the document_date of this Document.  # noqa: E501


        :return: The document_date of this Document.  # noqa: E501
        :rtype: date
        """
        return self._document_date

    @document_date.setter
    def document_date(self, document_date):
        """Sets the document_date of this Document.


        :param document_date: The document_date of this Document.  # noqa: E501
        :type: date
        """

        self._document_date = document_date

    @property
    def due_date(self):
        """Gets the due_date of this Document.  # noqa: E501

        To change the value use grace_period.  # noqa: E501

        :return: The due_date of this Document.  # noqa: E501
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Document.

        To change the value use grace_period.  # noqa: E501

        :param due_date: The due_date of this Document.  # noqa: E501
        :type: date
        """

        self._due_date = due_date

    @property
    def edited_at(self):
        """Gets the edited_at of this Document.  # noqa: E501


        :return: The edited_at of this Document.  # noqa: E501
        :rtype: datetime
        """
        return self._edited_at

    @edited_at.setter
    def edited_at(self, edited_at):
        """Sets the edited_at of this Document.


        :param edited_at: The edited_at of this Document.  # noqa: E501
        :type: datetime
        """

        self._edited_at = edited_at

    @property
    def external_id(self):
        """Gets the external_id of this Document.  # noqa: E501


        :return: The external_id of this Document.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Document.


        :param external_id: The external_id of this Document.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def replica_url(self):
        """Gets the replica_url of this Document.  # noqa: E501


        :return: The replica_url of this Document.  # noqa: E501
        :rtype: str
        """
        return self._replica_url

    @replica_url.setter
    def replica_url(self, replica_url):
        """Sets the replica_url of this Document.


        :param replica_url: The replica_url of this Document.  # noqa: E501
        :type: str
        """

        self._replica_url = replica_url

    @property
    def grace_period(self):
        """Gets the grace_period of this Document.  # noqa: E501

        will be replaced by its alias due_in_days.  # noqa: E501

        :return: The grace_period of this Document.  # noqa: E501
        :rtype: int
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period):
        """Sets the grace_period of this Document.

        will be replaced by its alias due_in_days.  # noqa: E501

        :param grace_period: The grace_period of this Document.  # noqa: E501
        :type: int
        """

        self._grace_period = grace_period

    @property
    def due_in_days(self):
        """Gets the due_in_days of this Document.  # noqa: E501

        due date in days.  # noqa: E501

        :return: The due_in_days of this Document.  # noqa: E501
        :rtype: int
        """
        return self._due_in_days

    @due_in_days.setter
    def due_in_days(self, due_in_days):
        """Sets the due_in_days of this Document.

        due date in days.  # noqa: E501

        :param due_in_days: The due_in_days of this Document.  # noqa: E501
        :type: int
        """

        self._due_in_days = due_in_days

    @property
    def id(self):
        """Gets the id of this Document.  # noqa: E501


        :return: The id of this Document.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Document.


        :param id: The id of this Document.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_archive(self):
        """Gets the is_archive of this Document.  # noqa: E501


        :return: The is_archive of this Document.  # noqa: E501
        :rtype: bool
        """
        return self._is_archive

    @is_archive.setter
    def is_archive(self, is_archive):
        """Sets the is_archive of this Document.


        :param is_archive: The is_archive of this Document.  # noqa: E501
        :type: bool
        """

        self._is_archive = is_archive

    @property
    def is_draft(self):
        """Gets the is_draft of this Document.  # noqa: E501

        This property is read only. To finish the document call /documents/{id}/done.  # noqa: E501

        :return: The is_draft of this Document.  # noqa: E501
        :rtype: bool
        """
        return self._is_draft

    @is_draft.setter
    def is_draft(self, is_draft):
        """Sets the is_draft of this Document.

        This property is read only. To finish the document call /documents/{id}/done.  # noqa: E501

        :param is_draft: The is_draft of this Document.  # noqa: E501
        :type: bool
        """

        self._is_draft = is_draft

    @property
    def is_replica(self):
        """Gets the is_replica of this Document.  # noqa: E501

        Marks a document as a replica from another software.  # noqa: E501

        :return: The is_replica of this Document.  # noqa: E501
        :rtype: bool
        """
        return self._is_replica

    @is_replica.setter
    def is_replica(self, is_replica):
        """Sets the is_replica of this Document.

        Marks a document as a replica from another software.  # noqa: E501

        :param is_replica: The is_replica of this Document.  # noqa: E501
        :type: bool
        """

        self._is_replica = is_replica

    @property
    def items(self):
        """Gets the items of this Document.  # noqa: E501


        :return: The items of this Document.  # noqa: E501
        :rtype: list[DocumentPosition]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Document.


        :param items: The items of this Document.  # noqa: E501
        :type: list[DocumentPosition]
        """

        self._items = items

    @property
    def last_postbox_id(self):
        """Gets the last_postbox_id of this Document.  # noqa: E501


        :return: The last_postbox_id of this Document.  # noqa: E501
        :rtype: int
        """
        return self._last_postbox_id

    @last_postbox_id.setter
    def last_postbox_id(self, last_postbox_id):
        """Sets the last_postbox_id of this Document.


        :param last_postbox_id: The last_postbox_id of this Document.  # noqa: E501
        :type: int
        """

        self._last_postbox_id = last_postbox_id

    @property
    def login_id(self):
        """Gets the login_id of this Document.  # noqa: E501

        If omitted or null, the currently active login is used.  # noqa: E501

        :return: The login_id of this Document.  # noqa: E501
        :rtype: int
        """
        return self._login_id

    @login_id.setter
    def login_id(self, login_id):
        """Sets the login_id of this Document.

        If omitted or null, the currently active login is used.  # noqa: E501

        :param login_id: The login_id of this Document.  # noqa: E501
        :type: int
        """

        self._login_id = login_id

    @property
    def number(self):
        """Gets the number of this Document.  # noqa: E501


        :return: The number of this Document.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Document.


        :param number: The number of this Document.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def order_number(self):
        """Gets the order_number of this Document.  # noqa: E501


        :return: The order_number of this Document.  # noqa: E501
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this Document.


        :param order_number: The order_number of this Document.  # noqa: E501
        :type: str
        """

        self._order_number = order_number

    @property
    def paid_amount(self):
        """Gets the paid_amount of this Document.  # noqa: E501


        :return: The paid_amount of this Document.  # noqa: E501
        :rtype: int
        """
        return self._paid_amount

    @paid_amount.setter
    def paid_amount(self, paid_amount):
        """Sets the paid_amount of this Document.


        :param paid_amount: The paid_amount of this Document.  # noqa: E501
        :type: int
        """

        self._paid_amount = paid_amount

    @property
    def paid_at(self):
        """Gets the paid_at of this Document.  # noqa: E501


        :return: The paid_at of this Document.  # noqa: E501
        :rtype: date
        """
        return self._paid_at

    @paid_at.setter
    def paid_at(self, paid_at):
        """Sets the paid_at of this Document.


        :param paid_at: The paid_at of this Document.  # noqa: E501
        :type: date
        """

        self._paid_at = paid_at

    @property
    def pdf_pages(self):
        """Gets the pdf_pages of this Document.  # noqa: E501


        :return: The pdf_pages of this Document.  # noqa: E501
        :rtype: int
        """
        return self._pdf_pages

    @pdf_pages.setter
    def pdf_pages(self, pdf_pages):
        """Sets the pdf_pages of this Document.


        :param pdf_pages: The pdf_pages of this Document.  # noqa: E501
        :type: int
        """

        self._pdf_pages = pdf_pages

    @property
    def pdf_template(self):
        """Gets the pdf_template of this Document.  # noqa: E501

        Default template is null or 'DE', default english is 'EN' and for all others use the numeric template ID.  # noqa: E501

        :return: The pdf_template of this Document.  # noqa: E501
        :rtype: str
        """
        return self._pdf_template

    @pdf_template.setter
    def pdf_template(self, pdf_template):
        """Sets the pdf_template of this Document.

        Default template is null or 'DE', default english is 'EN' and for all others use the numeric template ID.  # noqa: E501

        :param pdf_template: The pdf_template of this Document.  # noqa: E501
        :type: str
        """

        self._pdf_template = pdf_template

    @property
    def project_id(self):
        """Gets the project_id of this Document.  # noqa: E501


        :return: The project_id of this Document.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Document.


        :param project_id: The project_id of this Document.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def recurring_options(self):
        """Gets the recurring_options of this Document.  # noqa: E501

        This object is only available in document type RECURRING  # noqa: E501

        :return: The recurring_options of this Document.  # noqa: E501
        :rtype: DocumentRecurring
        """
        return self._recurring_options

    @recurring_options.setter
    def recurring_options(self, recurring_options):
        """Sets the recurring_options of this Document.

        This object is only available in document type RECURRING  # noqa: E501

        :param recurring_options: The recurring_options of this Document.  # noqa: E501
        :type: DocumentRecurring
        """

        self._recurring_options = recurring_options

    @property
    def ref_id(self):
        """Gets the ref_id of this Document.  # noqa: E501

        Reference document id  # noqa: E501

        :return: The ref_id of this Document.  # noqa: E501
        :rtype: int
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this Document.

        Reference document id  # noqa: E501

        :param ref_id: The ref_id of this Document.  # noqa: E501
        :type: int
        """

        self._ref_id = ref_id

    @property
    def service_date(self):
        """Gets the service_date of this Document.  # noqa: E501

        This object is only available in document type INVOICE or CREDIT.  # noqa: E501

        :return: The service_date of this Document.  # noqa: E501
        :rtype: ServiceDate
        """
        return self._service_date

    @service_date.setter
    def service_date(self, service_date):
        """Sets the service_date of this Document.

        This object is only available in document type INVOICE or CREDIT.  # noqa: E501

        :param service_date: The service_date of this Document.  # noqa: E501
        :type: ServiceDate
        """

        self._service_date = service_date

    @property
    def shipping_country(self):
        """Gets the shipping_country of this Document.  # noqa: E501


        :return: The shipping_country of this Document.  # noqa: E501
        :rtype: str
        """
        return self._shipping_country

    @shipping_country.setter
    def shipping_country(self, shipping_country):
        """Sets the shipping_country of this Document.


        :param shipping_country: The shipping_country of this Document.  # noqa: E501
        :type: str
        """

        self._shipping_country = shipping_country

    @property
    def status(self):
        """Gets the status of this Document.  # noqa: E501

        This value can only be used in document type DELIVERY, ORDER, CHARGE or OFFER. NULL is default = not set.  # noqa: E501

        :return: The status of this Document.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Document.

        This value can only be used in document type DELIVERY, ORDER, CHARGE or OFFER. NULL is default = not set.  # noqa: E501

        :param status: The status of this Document.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"ACCEPT", "DONE", "DROPSHIPPING", "CANCEL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def text(self):
        """Gets the text of this Document.  # noqa: E501


        :return: The text of this Document.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Document.


        :param text: The text of this Document.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def text_prefix(self):
        """Gets the text_prefix of this Document.  # noqa: E501


        :return: The text_prefix of this Document.  # noqa: E501
        :rtype: str
        """
        return self._text_prefix

    @text_prefix.setter
    def text_prefix(self, text_prefix):
        """Sets the text_prefix of this Document.


        :param text_prefix: The text_prefix of this Document.  # noqa: E501
        :type: str
        """

        self._text_prefix = text_prefix

    @property
    def text_tax(self):
        """Gets the text_tax of this Document.  # noqa: E501

        Overwrites the default vat-option text from the document layout. It is only displayed in documents with the type other than: Delivery, Dunning, Reminder or Letter and a different vat-option than null  # noqa: E501

        :return: The text_tax of this Document.  # noqa: E501
        :rtype: str
        """
        return self._text_tax

    @text_tax.setter
    def text_tax(self, text_tax):
        """Sets the text_tax of this Document.

        Overwrites the default vat-option text from the document layout. It is only displayed in documents with the type other than: Delivery, Dunning, Reminder or Letter and a different vat-option than null  # noqa: E501

        :param text_tax: The text_tax of this Document.  # noqa: E501
        :type: str
        """

        self._text_tax = text_tax

    @property
    def title(self):
        """Gets the title of this Document.  # noqa: E501


        :return: The title of this Document.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Document.


        :param title: The title of this Document.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Document.  # noqa: E501

        Can only set on create.  # noqa: E501

        :return: The type of this Document.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Document.

        Can only set on create.  # noqa: E501

        :param type: The type of this Document.  # noqa: E501
        :type: str
        """
        allowed_values = ["INVOICE", "RECURRING", "CREDIT", "OFFER", "REMINDER", "DUNNING", "STORNO", "STORNO_CREDIT", "DELIVERY", "PDF", "CHARGE", "CHARGE_CONFIRM", "LETTER", "ORDER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def use_shipping_address(self):
        """Gets the use_shipping_address of this Document.  # noqa: E501

        If true and customer has shipping address then it will be used.  # noqa: E501

        :return: The use_shipping_address of this Document.  # noqa: E501
        :rtype: bool
        """
        return self._use_shipping_address

    @use_shipping_address.setter
    def use_shipping_address(self, use_shipping_address):
        """Sets the use_shipping_address of this Document.

        If true and customer has shipping address then it will be used.  # noqa: E501

        :param use_shipping_address: The use_shipping_address of this Document.  # noqa: E501
        :type: bool
        """

        self._use_shipping_address = use_shipping_address

    @property
    def vat_country(self):
        """Gets the vat_country of this Document.  # noqa: E501


        :return: The vat_country of this Document.  # noqa: E501
        :rtype: str
        """
        return self._vat_country

    @vat_country.setter
    def vat_country(self, vat_country):
        """Sets the vat_country of this Document.


        :param vat_country: The vat_country of this Document.  # noqa: E501
        :type: str
        """

        self._vat_country = vat_country

    @property
    def fulfillment_country(self):
        """Gets the fulfillment_country of this Document.  # noqa: E501


        :return: The fulfillment_country of this Document.  # noqa: E501
        :rtype: str
        """
        return self._fulfillment_country

    @fulfillment_country.setter
    def fulfillment_country(self, fulfillment_country):
        """Sets the fulfillment_country of this Document.


        :param fulfillment_country: The fulfillment_country of this Document.  # noqa: E501
        :type: str
        """

        self._fulfillment_country = fulfillment_country

    @property
    def vat_option(self):
        """Gets the vat_option of this Document.  # noqa: E501

        NULL: Normal steuerbar<br/> nStb: Nicht steuerbar (Drittland)<br/> nStbUstID: Nicht steuerbar (EU mit USt-IdNr.)<br/> nStbNoneUstID: Nicht steuerbar (EU ohne USt-IdNr.)<br/> nStbIm: Nicht steuerbarer Innenumsatz<br/> revc: Steuerschuldwechsel §13b (Inland)<br/> IG: Innergemeinschaftliche Lieferung<br/> AL: Ausfuhrlieferung<br/> sStfr: sonstige Steuerbefreiung<br/> smallBusiness: Kleinunternehmen (Keine MwSt.)  # noqa: E501

        :return: The vat_option of this Document.  # noqa: E501
        :rtype: str
        """
        return self._vat_option

    @vat_option.setter
    def vat_option(self, vat_option):
        """Sets the vat_option of this Document.

        NULL: Normal steuerbar<br/> nStb: Nicht steuerbar (Drittland)<br/> nStbUstID: Nicht steuerbar (EU mit USt-IdNr.)<br/> nStbNoneUstID: Nicht steuerbar (EU ohne USt-IdNr.)<br/> nStbIm: Nicht steuerbarer Innenumsatz<br/> revc: Steuerschuldwechsel §13b (Inland)<br/> IG: Innergemeinschaftliche Lieferung<br/> AL: Ausfuhrlieferung<br/> sStfr: sonstige Steuerbefreiung<br/> smallBusiness: Kleinunternehmen (Keine MwSt.)  # noqa: E501

        :param vat_option: The vat_option of this Document.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"NULL", "nStb", "nStbUstID", "nStbNoneUstID", "nStbIm", "revc", "IG", "AL", "sStfr", "smallBusiness"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and vat_option not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `vat_option` ({0}), must be one of {1}"  # noqa: E501
                .format(vat_option, allowed_values)
            )

        self._vat_option = vat_option

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Document):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Document):
            return True

        return self.to_dict() != other.to_dict()
