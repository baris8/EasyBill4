# coding: utf-8

"""
    easybill REST API

     The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.  # noqa: E501

    The version of the OpenAPI document: 1.48.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Task(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'category': 'str',
        'category_custom': 'str',
        'created_at': 'datetime',
        'customer_id': 'int',
        'description': 'str',
        'document_id': 'int',
        'end_at': 'datetime',
        'finish_at': 'datetime',
        'id': 'int',
        'login_id': 'int',
        'name': 'str',
        'position_id': 'int',
        'priority': 'str',
        'project_id': 'int',
        'start_at': 'datetime',
        'status': 'str',
        'status_percent': 'int'
    }

    attribute_map = {
        'category': 'category',
        'category_custom': 'category_custom',
        'created_at': 'created_at',
        'customer_id': 'customer_id',
        'description': 'description',
        'document_id': 'document_id',
        'end_at': 'end_at',
        'finish_at': 'finish_at',
        'id': 'id',
        'login_id': 'login_id',
        'name': 'name',
        'position_id': 'position_id',
        'priority': 'priority',
        'project_id': 'project_id',
        'start_at': 'start_at',
        'status': 'status',
        'status_percent': 'status_percent'
    }

    def __init__(self, category='null', category_custom='null', created_at=None, customer_id=None, description='null', document_id=None, end_at=None, finish_at=None, id=None, login_id=None, name=None, position_id=None, priority='NORMAL', project_id=None, start_at=None, status=None, status_percent=None, local_vars_configuration=None):  # noqa: E501
        """Task - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._category = None
        self._category_custom = None
        self._created_at = None
        self._customer_id = None
        self._description = None
        self._document_id = None
        self._end_at = None
        self._finish_at = None
        self._id = None
        self._login_id = None
        self._name = None
        self._position_id = None
        self._priority = None
        self._project_id = None
        self._start_at = None
        self._status = None
        self._status_percent = None
        self.discriminator = None

        self.category = category
        self.category_custom = category_custom
        if created_at is not None:
            self.created_at = created_at
        self.customer_id = customer_id
        self.description = description
        self.document_id = document_id
        self.end_at = end_at
        self.finish_at = finish_at
        if id is not None:
            self.id = id
        self.login_id = login_id
        self.name = name
        self.position_id = position_id
        if priority is not None:
            self.priority = priority
        self.project_id = project_id
        self.start_at = start_at
        self.status = status
        self.status_percent = status_percent

    @property
    def category(self):
        """Gets the category of this Task.  # noqa: E501


        :return: The category of this Task.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Task.


        :param category: The category of this Task.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"CALL", "EMAIL", "FAX", "LUNCH", "MEETING", "TRAVEL", "CUSTOM"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and category not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def category_custom(self):
        """Gets the category_custom of this Task.  # noqa: E501

        The name of your custom category. Can only have a value if \"category\" is \"CUSTOM\".  # noqa: E501

        :return: The category_custom of this Task.  # noqa: E501
        :rtype: str
        """
        return self._category_custom

    @category_custom.setter
    def category_custom(self, category_custom):
        """Sets the category_custom of this Task.

        The name of your custom category. Can only have a value if \"category\" is \"CUSTOM\".  # noqa: E501

        :param category_custom: The category_custom of this Task.  # noqa: E501
        :type: str
        """

        self._category_custom = category_custom

    @property
    def created_at(self):
        """Gets the created_at of this Task.  # noqa: E501


        :return: The created_at of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Task.


        :param created_at: The created_at of this Task.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def customer_id(self):
        """Gets the customer_id of this Task.  # noqa: E501


        :return: The customer_id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Task.


        :param customer_id: The customer_id of this Task.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def description(self):
        """Gets the description of this Task.  # noqa: E501


        :return: The description of this Task.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Task.


        :param description: The description of this Task.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def document_id(self):
        """Gets the document_id of this Task.  # noqa: E501


        :return: The document_id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this Task.


        :param document_id: The document_id of this Task.  # noqa: E501
        :type: int
        """

        self._document_id = document_id

    @property
    def end_at(self):
        """Gets the end_at of this Task.  # noqa: E501

        The deadline  # noqa: E501

        :return: The end_at of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this Task.

        The deadline  # noqa: E501

        :param end_at: The end_at of this Task.  # noqa: E501
        :type: datetime
        """

        self._end_at = end_at

    @property
    def finish_at(self):
        """Gets the finish_at of this Task.  # noqa: E501

        The time when the task was marked as done  # noqa: E501

        :return: The finish_at of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._finish_at

    @finish_at.setter
    def finish_at(self, finish_at):
        """Sets the finish_at of this Task.

        The time when the task was marked as done  # noqa: E501

        :param finish_at: The finish_at of this Task.  # noqa: E501
        :type: datetime
        """

        self._finish_at = finish_at

    @property
    def id(self):
        """Gets the id of this Task.  # noqa: E501


        :return: The id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.


        :param id: The id of this Task.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def login_id(self):
        """Gets the login_id of this Task.  # noqa: E501

        When omitted or null, the currently active login is used  # noqa: E501

        :return: The login_id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._login_id

    @login_id.setter
    def login_id(self, login_id):
        """Sets the login_id of this Task.

        When omitted or null, the currently active login is used  # noqa: E501

        :param login_id: The login_id of this Task.  # noqa: E501
        :type: int
        """

        self._login_id = login_id

    @property
    def name(self):
        """Gets the name of this Task.  # noqa: E501


        :return: The name of this Task.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Task.


        :param name: The name of this Task.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def position_id(self):
        """Gets the position_id of this Task.  # noqa: E501


        :return: The position_id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._position_id

    @position_id.setter
    def position_id(self, position_id):
        """Sets the position_id of this Task.


        :param position_id: The position_id of this Task.  # noqa: E501
        :type: int
        """

        self._position_id = position_id

    @property
    def priority(self):
        """Gets the priority of this Task.  # noqa: E501


        :return: The priority of this Task.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Task.


        :param priority: The priority of this Task.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOW", "NORMAL", "HIGH"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and priority not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"  # noqa: E501
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def project_id(self):
        """Gets the project_id of this Task.  # noqa: E501


        :return: The project_id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Task.


        :param project_id: The project_id of this Task.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def start_at(self):
        """Gets the start_at of this Task.  # noqa: E501


        :return: The start_at of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this Task.


        :param start_at: The start_at of this Task.  # noqa: E501
        :type: datetime
        """

        self._start_at = start_at

    @property
    def status(self):
        """Gets the status of this Task.  # noqa: E501


        :return: The status of this Task.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Task.


        :param status: The status of this Task.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["WAITING", "PROCESSING", "DONE", "CANCEL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_percent(self):
        """Gets the status_percent of this Task.  # noqa: E501


        :return: The status_percent of this Task.  # noqa: E501
        :rtype: int
        """
        return self._status_percent

    @status_percent.setter
    def status_percent(self, status_percent):
        """Sets the status_percent of this Task.


        :param status_percent: The status_percent of this Task.  # noqa: E501
        :type: int
        """

        self._status_percent = status_percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Task):
            return True

        return self.to_dict() != other.to_dict()
