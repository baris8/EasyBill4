# coding: utf-8

"""
    easybill REST API

     The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.  # noqa: E501

    The version of the OpenAPI document: 1.48.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PostBoxRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'to': 'str',
        'cc': 'str',
        '_from': 'str',
        'subject': 'str',
        'message': 'str',
        'date': 'date'
    }

    attribute_map = {
        'to': 'to',
        'cc': 'cc',
        '_from': 'from',
        'subject': 'subject',
        'message': 'message',
        'date': 'date'
    }

    def __init__(self, to=None, cc=None, _from=None, subject=None, message=None, date=None, local_vars_configuration=None):  # noqa: E501
        """PostBoxRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._to = None
        self._cc = None
        self.__from = None
        self._subject = None
        self._message = None
        self._date = None
        self.discriminator = None

        if to is not None:
            self.to = to
        if cc is not None:
            self.cc = cc
        if _from is not None:
            self._from = _from
        if subject is not None:
            self.subject = subject
        if message is not None:
            self.message = message
        if date is not None:
            self.date = date

    @property
    def to(self):
        """Gets the to of this PostBoxRequest.  # noqa: E501


        :return: The to of this PostBoxRequest.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this PostBoxRequest.


        :param to: The to of this PostBoxRequest.  # noqa: E501
        :type: str
        """

        self._to = to

    @property
    def cc(self):
        """Gets the cc of this PostBoxRequest.  # noqa: E501


        :return: The cc of this PostBoxRequest.  # noqa: E501
        :rtype: str
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this PostBoxRequest.


        :param cc: The cc of this PostBoxRequest.  # noqa: E501
        :type: str
        """

        self._cc = cc

    @property
    def _from(self):
        """Gets the _from of this PostBoxRequest.  # noqa: E501


        :return: The _from of this PostBoxRequest.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this PostBoxRequest.


        :param _from: The _from of this PostBoxRequest.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def subject(self):
        """Gets the subject of this PostBoxRequest.  # noqa: E501


        :return: The subject of this PostBoxRequest.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this PostBoxRequest.


        :param subject: The subject of this PostBoxRequest.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def message(self):
        """Gets the message of this PostBoxRequest.  # noqa: E501


        :return: The message of this PostBoxRequest.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PostBoxRequest.


        :param message: The message of this PostBoxRequest.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def date(self):
        """Gets the date of this PostBoxRequest.  # noqa: E501


        :return: The date of this PostBoxRequest.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this PostBoxRequest.


        :param date: The date of this PostBoxRequest.  # noqa: E501
        :type: date
        """

        self._date = date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostBoxRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostBoxRequest):
            return True

        return self.to_dict() != other.to_dict()
