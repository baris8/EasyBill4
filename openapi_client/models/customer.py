# coding: utf-8

"""
    easybill REST API

     The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.  # noqa: E501

    The version of the OpenAPI document: 1.48.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Customer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'acquire_options': 'int',
        'additional_groups_ids': 'list[int]',
        'bank_account': 'str',
        'bank_account_owner': 'str',
        'bank_bic': 'str',
        'bank_code': 'str',
        'bank_iban': 'str',
        'bank_name': 'str',
        'birth_date': 'date',
        'cash_allowance': 'float',
        'cash_allowance_days': 'int',
        'cash_discount': 'float',
        'cash_discount_type': 'str',
        'city': 'str',
        'company_name': 'str',
        'country': 'str',
        'created_at': 'date',
        'updated_at': 'str',
        'delivery_city': 'str',
        'delivery_company_name': 'str',
        'delivery_country': 'str',
        'delivery_first_name': 'str',
        'delivery_last_name': 'str',
        'delivery_personal': 'bool',
        'delivery_salutation': 'int',
        'delivery_street': 'str',
        'delivery_suffix_1': 'str',
        'delivery_suffix_2': 'str',
        'delivery_zip_code': 'str',
        'display_name': 'str',
        'emails': 'list[str]',
        'fax': 'str',
        'first_name': 'str',
        'grace_period': 'int',
        'due_in_days': 'int',
        'group_id': 'int',
        'id': 'int',
        'info_1': 'str',
        'info_2': 'str',
        'internet': 'str',
        'last_name': 'str',
        'login_id': 'int',
        'mobile': 'str',
        'note': 'str',
        'number': 'str',
        'payment_options': 'int',
        'personal': 'bool',
        'phone_1': 'str',
        'phone_2': 'str',
        'postbox': 'str',
        'postbox_city': 'str',
        'postbox_country': 'str',
        'postbox_zip_code': 'str',
        'sale_price_level': 'str',
        'salutation': 'int',
        'sepa_agreement': 'str',
        'sepa_agreement_date': 'date',
        'sepa_mandate_reference': 'str',
        'since_date': 'date',
        'street': 'str',
        'suffix_1': 'str',
        'suffix_2': 'str',
        'tax_number': 'str',
        'court': 'str',
        'court_registry_number': 'str',
        'tax_options': 'str',
        'title': 'str',
        'vat_identifier': 'str',
        'zip_code': 'str'
    }

    attribute_map = {
        'acquire_options': 'acquire_options',
        'additional_groups_ids': 'additional_groups_ids',
        'bank_account': 'bank_account',
        'bank_account_owner': 'bank_account_owner',
        'bank_bic': 'bank_bic',
        'bank_code': 'bank_code',
        'bank_iban': 'bank_iban',
        'bank_name': 'bank_name',
        'birth_date': 'birth_date',
        'cash_allowance': 'cash_allowance',
        'cash_allowance_days': 'cash_allowance_days',
        'cash_discount': 'cash_discount',
        'cash_discount_type': 'cash_discount_type',
        'city': 'city',
        'company_name': 'company_name',
        'country': 'country',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'delivery_city': 'delivery_city',
        'delivery_company_name': 'delivery_company_name',
        'delivery_country': 'delivery_country',
        'delivery_first_name': 'delivery_first_name',
        'delivery_last_name': 'delivery_last_name',
        'delivery_personal': 'delivery_personal',
        'delivery_salutation': 'delivery_salutation',
        'delivery_street': 'delivery_street',
        'delivery_suffix_1': 'delivery_suffix_1',
        'delivery_suffix_2': 'delivery_suffix_2',
        'delivery_zip_code': 'delivery_zip_code',
        'display_name': 'display_name',
        'emails': 'emails',
        'fax': 'fax',
        'first_name': 'first_name',
        'grace_period': 'grace_period',
        'due_in_days': 'due_in_days',
        'group_id': 'group_id',
        'id': 'id',
        'info_1': 'info_1',
        'info_2': 'info_2',
        'internet': 'internet',
        'last_name': 'last_name',
        'login_id': 'login_id',
        'mobile': 'mobile',
        'note': 'note',
        'number': 'number',
        'payment_options': 'payment_options',
        'personal': 'personal',
        'phone_1': 'phone_1',
        'phone_2': 'phone_2',
        'postbox': 'postbox',
        'postbox_city': 'postbox_city',
        'postbox_country': 'postbox_country',
        'postbox_zip_code': 'postbox_zip_code',
        'sale_price_level': 'sale_price_level',
        'salutation': 'salutation',
        'sepa_agreement': 'sepa_agreement',
        'sepa_agreement_date': 'sepa_agreement_date',
        'sepa_mandate_reference': 'sepa_mandate_reference',
        'since_date': 'since_date',
        'street': 'street',
        'suffix_1': 'suffix_1',
        'suffix_2': 'suffix_2',
        'tax_number': 'tax_number',
        'court': 'court',
        'court_registry_number': 'court_registry_number',
        'tax_options': 'tax_options',
        'title': 'title',
        'vat_identifier': 'vat_identifier',
        'zip_code': 'zip_code'
    }

    def __init__(self, acquire_options=None, additional_groups_ids=None, bank_account=None, bank_account_owner=None, bank_bic=None, bank_code=None, bank_iban=None, bank_name=None, birth_date=None, cash_allowance=None, cash_allowance_days=None, cash_discount=None, cash_discount_type=None, city=None, company_name=None, country=None, created_at=None, updated_at=None, delivery_city=None, delivery_company_name=None, delivery_country=None, delivery_first_name=None, delivery_last_name=None, delivery_personal=None, delivery_salutation=None, delivery_street=None, delivery_suffix_1=None, delivery_suffix_2=None, delivery_zip_code=None, display_name=None, emails=None, fax=None, first_name=None, grace_period=None, due_in_days=None, group_id=None, id=None, info_1=None, info_2=None, internet=None, last_name=None, login_id=None, mobile=None, note=None, number=None, payment_options=None, personal=False, phone_1=None, phone_2=None, postbox=None, postbox_city=None, postbox_country=None, postbox_zip_code=None, sale_price_level=None, salutation=None, sepa_agreement=None, sepa_agreement_date=None, sepa_mandate_reference=None, since_date=None, street=None, suffix_1=None, suffix_2=None, tax_number=None, court=None, court_registry_number=None, tax_options=None, title=None, vat_identifier=None, zip_code=None, local_vars_configuration=None):  # noqa: E501
        """Customer - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._acquire_options = None
        self._additional_groups_ids = None
        self._bank_account = None
        self._bank_account_owner = None
        self._bank_bic = None
        self._bank_code = None
        self._bank_iban = None
        self._bank_name = None
        self._birth_date = None
        self._cash_allowance = None
        self._cash_allowance_days = None
        self._cash_discount = None
        self._cash_discount_type = None
        self._city = None
        self._company_name = None
        self._country = None
        self._created_at = None
        self._updated_at = None
        self._delivery_city = None
        self._delivery_company_name = None
        self._delivery_country = None
        self._delivery_first_name = None
        self._delivery_last_name = None
        self._delivery_personal = None
        self._delivery_salutation = None
        self._delivery_street = None
        self._delivery_suffix_1 = None
        self._delivery_suffix_2 = None
        self._delivery_zip_code = None
        self._display_name = None
        self._emails = None
        self._fax = None
        self._first_name = None
        self._grace_period = None
        self._due_in_days = None
        self._group_id = None
        self._id = None
        self._info_1 = None
        self._info_2 = None
        self._internet = None
        self._last_name = None
        self._login_id = None
        self._mobile = None
        self._note = None
        self._number = None
        self._payment_options = None
        self._personal = None
        self._phone_1 = None
        self._phone_2 = None
        self._postbox = None
        self._postbox_city = None
        self._postbox_country = None
        self._postbox_zip_code = None
        self._sale_price_level = None
        self._salutation = None
        self._sepa_agreement = None
        self._sepa_agreement_date = None
        self._sepa_mandate_reference = None
        self._since_date = None
        self._street = None
        self._suffix_1 = None
        self._suffix_2 = None
        self._tax_number = None
        self._court = None
        self._court_registry_number = None
        self._tax_options = None
        self._title = None
        self._vat_identifier = None
        self._zip_code = None
        self.discriminator = None

        self.acquire_options = acquire_options
        if additional_groups_ids is not None:
            self.additional_groups_ids = additional_groups_ids
        self.bank_account = bank_account
        self.bank_account_owner = bank_account_owner
        self.bank_bic = bank_bic
        self.bank_code = bank_code
        self.bank_iban = bank_iban
        self.bank_name = bank_name
        self.birth_date = birth_date
        self.cash_allowance = cash_allowance
        if cash_allowance_days is not None:
            self.cash_allowance_days = cash_allowance_days
        self.cash_discount = cash_discount
        self.cash_discount_type = cash_discount_type
        self.city = city
        self.company_name = company_name
        if country is not None:
            self.country = country
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        self.delivery_city = delivery_city
        self.delivery_company_name = delivery_company_name
        self.delivery_country = delivery_country
        self.delivery_first_name = delivery_first_name
        self.delivery_last_name = delivery_last_name
        if delivery_personal is not None:
            self.delivery_personal = delivery_personal
        if delivery_salutation is not None:
            self.delivery_salutation = delivery_salutation
        self.delivery_street = delivery_street
        self.delivery_suffix_1 = delivery_suffix_1
        self.delivery_suffix_2 = delivery_suffix_2
        self.delivery_zip_code = delivery_zip_code
        if display_name is not None:
            self.display_name = display_name
        if emails is not None:
            self.emails = emails
        self.fax = fax
        self.first_name = first_name
        self.grace_period = grace_period
        self.due_in_days = due_in_days
        self.group_id = group_id
        if id is not None:
            self.id = id
        self.info_1 = info_1
        self.info_2 = info_2
        self.internet = internet
        self.last_name = last_name
        if login_id is not None:
            self.login_id = login_id
        self.mobile = mobile
        self.note = note
        if number is not None:
            self.number = number
        self.payment_options = payment_options
        if personal is not None:
            self.personal = personal
        self.phone_1 = phone_1
        self.phone_2 = phone_2
        self.postbox = postbox
        self.postbox_city = postbox_city
        self.postbox_country = postbox_country
        self.postbox_zip_code = postbox_zip_code
        self.sale_price_level = sale_price_level
        if salutation is not None:
            self.salutation = salutation
        self.sepa_agreement = sepa_agreement
        self.sepa_agreement_date = sepa_agreement_date
        self.sepa_mandate_reference = sepa_mandate_reference
        self.since_date = since_date
        self.street = street
        self.suffix_1 = suffix_1
        self.suffix_2 = suffix_2
        self.tax_number = tax_number
        self.court = court
        self.court_registry_number = court_registry_number
        self.tax_options = tax_options
        self.title = title
        self.vat_identifier = vat_identifier
        self.zip_code = zip_code

    @property
    def acquire_options(self):
        """Gets the acquire_options of this Customer.  # noqa: E501

        1 = Empfehlung eines anderen Kunden, 2 = Zeitungsanzeige, 3 = Eigene Akquisition, 4 = Mitarbeiter Akquisition, 5 = Google, 6 = Gelbe Seiten, 7 = Kostenlose Internet Plattform, 8 = Bezahlte Internet Plattform  # noqa: E501

        :return: The acquire_options of this Customer.  # noqa: E501
        :rtype: int
        """
        return self._acquire_options

    @acquire_options.setter
    def acquire_options(self, acquire_options):
        """Sets the acquire_options of this Customer.

        1 = Empfehlung eines anderen Kunden, 2 = Zeitungsanzeige, 3 = Eigene Akquisition, 4 = Mitarbeiter Akquisition, 5 = Google, 6 = Gelbe Seiten, 7 = Kostenlose Internet Plattform, 8 = Bezahlte Internet Plattform  # noqa: E501

        :param acquire_options: The acquire_options of this Customer.  # noqa: E501
        :type: int
        """

        self._acquire_options = acquire_options

    @property
    def additional_groups_ids(self):
        """Gets the additional_groups_ids of this Customer.  # noqa: E501


        :return: The additional_groups_ids of this Customer.  # noqa: E501
        :rtype: list[int]
        """
        return self._additional_groups_ids

    @additional_groups_ids.setter
    def additional_groups_ids(self, additional_groups_ids):
        """Sets the additional_groups_ids of this Customer.


        :param additional_groups_ids: The additional_groups_ids of this Customer.  # noqa: E501
        :type: list[int]
        """

        self._additional_groups_ids = additional_groups_ids

    @property
    def bank_account(self):
        """Gets the bank_account of this Customer.  # noqa: E501


        :return: The bank_account of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this Customer.


        :param bank_account: The bank_account of this Customer.  # noqa: E501
        :type: str
        """

        self._bank_account = bank_account

    @property
    def bank_account_owner(self):
        """Gets the bank_account_owner of this Customer.  # noqa: E501


        :return: The bank_account_owner of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_owner

    @bank_account_owner.setter
    def bank_account_owner(self, bank_account_owner):
        """Sets the bank_account_owner of this Customer.


        :param bank_account_owner: The bank_account_owner of this Customer.  # noqa: E501
        :type: str
        """

        self._bank_account_owner = bank_account_owner

    @property
    def bank_bic(self):
        """Gets the bank_bic of this Customer.  # noqa: E501


        :return: The bank_bic of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._bank_bic

    @bank_bic.setter
    def bank_bic(self, bank_bic):
        """Sets the bank_bic of this Customer.


        :param bank_bic: The bank_bic of this Customer.  # noqa: E501
        :type: str
        """

        self._bank_bic = bank_bic

    @property
    def bank_code(self):
        """Gets the bank_code of this Customer.  # noqa: E501


        :return: The bank_code of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code):
        """Sets the bank_code of this Customer.


        :param bank_code: The bank_code of this Customer.  # noqa: E501
        :type: str
        """

        self._bank_code = bank_code

    @property
    def bank_iban(self):
        """Gets the bank_iban of this Customer.  # noqa: E501


        :return: The bank_iban of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._bank_iban

    @bank_iban.setter
    def bank_iban(self, bank_iban):
        """Sets the bank_iban of this Customer.


        :param bank_iban: The bank_iban of this Customer.  # noqa: E501
        :type: str
        """

        self._bank_iban = bank_iban

    @property
    def bank_name(self):
        """Gets the bank_name of this Customer.  # noqa: E501


        :return: The bank_name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this Customer.


        :param bank_name: The bank_name of this Customer.  # noqa: E501
        :type: str
        """

        self._bank_name = bank_name

    @property
    def birth_date(self):
        """Gets the birth_date of this Customer.  # noqa: E501


        :return: The birth_date of this Customer.  # noqa: E501
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this Customer.


        :param birth_date: The birth_date of this Customer.  # noqa: E501
        :type: date
        """

        self._birth_date = birth_date

    @property
    def cash_allowance(self):
        """Gets the cash_allowance of this Customer.  # noqa: E501


        :return: The cash_allowance of this Customer.  # noqa: E501
        :rtype: float
        """
        return self._cash_allowance

    @cash_allowance.setter
    def cash_allowance(self, cash_allowance):
        """Sets the cash_allowance of this Customer.


        :param cash_allowance: The cash_allowance of this Customer.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                cash_allowance is not None and cash_allowance > 1E+2):  # noqa: E501
            raise ValueError("Invalid value for `cash_allowance`, must be a value less than or equal to `1E+2`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cash_allowance is not None and cash_allowance < 0):  # noqa: E501
            raise ValueError("Invalid value for `cash_allowance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._cash_allowance = cash_allowance

    @property
    def cash_allowance_days(self):
        """Gets the cash_allowance_days of this Customer.  # noqa: E501


        :return: The cash_allowance_days of this Customer.  # noqa: E501
        :rtype: int
        """
        return self._cash_allowance_days

    @cash_allowance_days.setter
    def cash_allowance_days(self, cash_allowance_days):
        """Sets the cash_allowance_days of this Customer.


        :param cash_allowance_days: The cash_allowance_days of this Customer.  # noqa: E501
        :type: int
        """

        self._cash_allowance_days = cash_allowance_days

    @property
    def cash_discount(self):
        """Gets the cash_discount of this Customer.  # noqa: E501


        :return: The cash_discount of this Customer.  # noqa: E501
        :rtype: float
        """
        return self._cash_discount

    @cash_discount.setter
    def cash_discount(self, cash_discount):
        """Sets the cash_discount of this Customer.


        :param cash_discount: The cash_discount of this Customer.  # noqa: E501
        :type: float
        """

        self._cash_discount = cash_discount

    @property
    def cash_discount_type(self):
        """Gets the cash_discount_type of this Customer.  # noqa: E501


        :return: The cash_discount_type of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._cash_discount_type

    @cash_discount_type.setter
    def cash_discount_type(self, cash_discount_type):
        """Sets the cash_discount_type of this Customer.


        :param cash_discount_type: The cash_discount_type of this Customer.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"PERCENT", "AMOUNT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and cash_discount_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `cash_discount_type` ({0}), must be one of {1}"  # noqa: E501
                .format(cash_discount_type, allowed_values)
            )

        self._cash_discount_type = cash_discount_type

    @property
    def city(self):
        """Gets the city of this Customer.  # noqa: E501


        :return: The city of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Customer.


        :param city: The city of this Customer.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def company_name(self):
        """Gets the company_name of this Customer.  # noqa: E501


        :return: The company_name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Customer.


        :param company_name: The company_name of this Customer.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def country(self):
        """Gets the country of this Customer.  # noqa: E501


        :return: The country of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Customer.


        :param country: The country of this Customer.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def created_at(self):
        """Gets the created_at of this Customer.  # noqa: E501


        :return: The created_at of this Customer.  # noqa: E501
        :rtype: date
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Customer.


        :param created_at: The created_at of this Customer.  # noqa: E501
        :type: date
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Customer.  # noqa: E501


        :return: The updated_at of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Customer.


        :param updated_at: The updated_at of this Customer.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def delivery_city(self):
        """Gets the delivery_city of this Customer.  # noqa: E501


        :return: The delivery_city of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._delivery_city

    @delivery_city.setter
    def delivery_city(self, delivery_city):
        """Sets the delivery_city of this Customer.


        :param delivery_city: The delivery_city of this Customer.  # noqa: E501
        :type: str
        """

        self._delivery_city = delivery_city

    @property
    def delivery_company_name(self):
        """Gets the delivery_company_name of this Customer.  # noqa: E501


        :return: The delivery_company_name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._delivery_company_name

    @delivery_company_name.setter
    def delivery_company_name(self, delivery_company_name):
        """Sets the delivery_company_name of this Customer.


        :param delivery_company_name: The delivery_company_name of this Customer.  # noqa: E501
        :type: str
        """

        self._delivery_company_name = delivery_company_name

    @property
    def delivery_country(self):
        """Gets the delivery_country of this Customer.  # noqa: E501


        :return: The delivery_country of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._delivery_country

    @delivery_country.setter
    def delivery_country(self, delivery_country):
        """Sets the delivery_country of this Customer.


        :param delivery_country: The delivery_country of this Customer.  # noqa: E501
        :type: str
        """

        self._delivery_country = delivery_country

    @property
    def delivery_first_name(self):
        """Gets the delivery_first_name of this Customer.  # noqa: E501


        :return: The delivery_first_name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._delivery_first_name

    @delivery_first_name.setter
    def delivery_first_name(self, delivery_first_name):
        """Sets the delivery_first_name of this Customer.


        :param delivery_first_name: The delivery_first_name of this Customer.  # noqa: E501
        :type: str
        """

        self._delivery_first_name = delivery_first_name

    @property
    def delivery_last_name(self):
        """Gets the delivery_last_name of this Customer.  # noqa: E501


        :return: The delivery_last_name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._delivery_last_name

    @delivery_last_name.setter
    def delivery_last_name(self, delivery_last_name):
        """Sets the delivery_last_name of this Customer.


        :param delivery_last_name: The delivery_last_name of this Customer.  # noqa: E501
        :type: str
        """

        self._delivery_last_name = delivery_last_name

    @property
    def delivery_personal(self):
        """Gets the delivery_personal of this Customer.  # noqa: E501


        :return: The delivery_personal of this Customer.  # noqa: E501
        :rtype: bool
        """
        return self._delivery_personal

    @delivery_personal.setter
    def delivery_personal(self, delivery_personal):
        """Sets the delivery_personal of this Customer.


        :param delivery_personal: The delivery_personal of this Customer.  # noqa: E501
        :type: bool
        """

        self._delivery_personal = delivery_personal

    @property
    def delivery_salutation(self):
        """Gets the delivery_salutation of this Customer.  # noqa: E501

        0 = nothing, 1 = Mr, 2 = Mrs, 3 = Company, 4 = Mr & Mrs, 5 = Married couple, 6 = Family  # noqa: E501

        :return: The delivery_salutation of this Customer.  # noqa: E501
        :rtype: int
        """
        return self._delivery_salutation

    @delivery_salutation.setter
    def delivery_salutation(self, delivery_salutation):
        """Sets the delivery_salutation of this Customer.

        0 = nothing, 1 = Mr, 2 = Mrs, 3 = Company, 4 = Mr & Mrs, 5 = Married couple, 6 = Family  # noqa: E501

        :param delivery_salutation: The delivery_salutation of this Customer.  # noqa: E501
        :type: int
        """

        self._delivery_salutation = delivery_salutation

    @property
    def delivery_street(self):
        """Gets the delivery_street of this Customer.  # noqa: E501


        :return: The delivery_street of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._delivery_street

    @delivery_street.setter
    def delivery_street(self, delivery_street):
        """Sets the delivery_street of this Customer.


        :param delivery_street: The delivery_street of this Customer.  # noqa: E501
        :type: str
        """

        self._delivery_street = delivery_street

    @property
    def delivery_suffix_1(self):
        """Gets the delivery_suffix_1 of this Customer.  # noqa: E501


        :return: The delivery_suffix_1 of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._delivery_suffix_1

    @delivery_suffix_1.setter
    def delivery_suffix_1(self, delivery_suffix_1):
        """Sets the delivery_suffix_1 of this Customer.


        :param delivery_suffix_1: The delivery_suffix_1 of this Customer.  # noqa: E501
        :type: str
        """

        self._delivery_suffix_1 = delivery_suffix_1

    @property
    def delivery_suffix_2(self):
        """Gets the delivery_suffix_2 of this Customer.  # noqa: E501


        :return: The delivery_suffix_2 of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._delivery_suffix_2

    @delivery_suffix_2.setter
    def delivery_suffix_2(self, delivery_suffix_2):
        """Sets the delivery_suffix_2 of this Customer.


        :param delivery_suffix_2: The delivery_suffix_2 of this Customer.  # noqa: E501
        :type: str
        """

        self._delivery_suffix_2 = delivery_suffix_2

    @property
    def delivery_zip_code(self):
        """Gets the delivery_zip_code of this Customer.  # noqa: E501


        :return: The delivery_zip_code of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._delivery_zip_code

    @delivery_zip_code.setter
    def delivery_zip_code(self, delivery_zip_code):
        """Sets the delivery_zip_code of this Customer.


        :param delivery_zip_code: The delivery_zip_code of this Customer.  # noqa: E501
        :type: str
        """

        self._delivery_zip_code = delivery_zip_code

    @property
    def display_name(self):
        """Gets the display_name of this Customer.  # noqa: E501


        :return: The display_name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Customer.


        :param display_name: The display_name of this Customer.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def emails(self):
        """Gets the emails of this Customer.  # noqa: E501


        :return: The emails of this Customer.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this Customer.


        :param emails: The emails of this Customer.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def fax(self):
        """Gets the fax of this Customer.  # noqa: E501


        :return: The fax of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this Customer.


        :param fax: The fax of this Customer.  # noqa: E501
        :type: str
        """

        self._fax = fax

    @property
    def first_name(self):
        """Gets the first_name of this Customer.  # noqa: E501


        :return: The first_name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Customer.


        :param first_name: The first_name of this Customer.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def grace_period(self):
        """Gets the grace_period of this Customer.  # noqa: E501

        will be replaced by its alias due_in_days.  # noqa: E501

        :return: The grace_period of this Customer.  # noqa: E501
        :rtype: int
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period):
        """Sets the grace_period of this Customer.

        will be replaced by its alias due_in_days.  # noqa: E501

        :param grace_period: The grace_period of this Customer.  # noqa: E501
        :type: int
        """

        self._grace_period = grace_period

    @property
    def due_in_days(self):
        """Gets the due_in_days of this Customer.  # noqa: E501

        due date in days  # noqa: E501

        :return: The due_in_days of this Customer.  # noqa: E501
        :rtype: int
        """
        return self._due_in_days

    @due_in_days.setter
    def due_in_days(self, due_in_days):
        """Sets the due_in_days of this Customer.

        due date in days  # noqa: E501

        :param due_in_days: The due_in_days of this Customer.  # noqa: E501
        :type: int
        """

        self._due_in_days = due_in_days

    @property
    def group_id(self):
        """Gets the group_id of this Customer.  # noqa: E501


        :return: The group_id of this Customer.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Customer.


        :param group_id: The group_id of this Customer.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this Customer.  # noqa: E501


        :return: The id of this Customer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Customer.


        :param id: The id of this Customer.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def info_1(self):
        """Gets the info_1 of this Customer.  # noqa: E501


        :return: The info_1 of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._info_1

    @info_1.setter
    def info_1(self, info_1):
        """Sets the info_1 of this Customer.


        :param info_1: The info_1 of this Customer.  # noqa: E501
        :type: str
        """

        self._info_1 = info_1

    @property
    def info_2(self):
        """Gets the info_2 of this Customer.  # noqa: E501


        :return: The info_2 of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._info_2

    @info_2.setter
    def info_2(self, info_2):
        """Sets the info_2 of this Customer.


        :param info_2: The info_2 of this Customer.  # noqa: E501
        :type: str
        """

        self._info_2 = info_2

    @property
    def internet(self):
        """Gets the internet of this Customer.  # noqa: E501


        :return: The internet of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._internet

    @internet.setter
    def internet(self, internet):
        """Sets the internet of this Customer.


        :param internet: The internet of this Customer.  # noqa: E501
        :type: str
        """

        self._internet = internet

    @property
    def last_name(self):
        """Gets the last_name of this Customer.  # noqa: E501


        :return: The last_name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Customer.


        :param last_name: The last_name of this Customer.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def login_id(self):
        """Gets the login_id of this Customer.  # noqa: E501


        :return: The login_id of this Customer.  # noqa: E501
        :rtype: int
        """
        return self._login_id

    @login_id.setter
    def login_id(self, login_id):
        """Sets the login_id of this Customer.


        :param login_id: The login_id of this Customer.  # noqa: E501
        :type: int
        """

        self._login_id = login_id

    @property
    def mobile(self):
        """Gets the mobile of this Customer.  # noqa: E501


        :return: The mobile of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this Customer.


        :param mobile: The mobile of this Customer.  # noqa: E501
        :type: str
        """

        self._mobile = mobile

    @property
    def note(self):
        """Gets the note of this Customer.  # noqa: E501


        :return: The note of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Customer.


        :param note: The note of this Customer.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def number(self):
        """Gets the number of this Customer.  # noqa: E501

        Automatically generated if empty.  # noqa: E501

        :return: The number of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Customer.

        Automatically generated if empty.  # noqa: E501

        :param number: The number of this Customer.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def payment_options(self):
        """Gets the payment_options of this Customer.  # noqa: E501

        1 = Stets pünktliche Zahlung, 2 = überwiegend pünktliche Zahlung, 3 = überwiegend verspätete Zahlung, 5 = Grundsätzlich verspätete Zahlung  # noqa: E501

        :return: The payment_options of this Customer.  # noqa: E501
        :rtype: int
        """
        return self._payment_options

    @payment_options.setter
    def payment_options(self, payment_options):
        """Sets the payment_options of this Customer.

        1 = Stets pünktliche Zahlung, 2 = überwiegend pünktliche Zahlung, 3 = überwiegend verspätete Zahlung, 5 = Grundsätzlich verspätete Zahlung  # noqa: E501

        :param payment_options: The payment_options of this Customer.  # noqa: E501
        :type: int
        """

        self._payment_options = payment_options

    @property
    def personal(self):
        """Gets the personal of this Customer.  # noqa: E501


        :return: The personal of this Customer.  # noqa: E501
        :rtype: bool
        """
        return self._personal

    @personal.setter
    def personal(self, personal):
        """Sets the personal of this Customer.


        :param personal: The personal of this Customer.  # noqa: E501
        :type: bool
        """

        self._personal = personal

    @property
    def phone_1(self):
        """Gets the phone_1 of this Customer.  # noqa: E501


        :return: The phone_1 of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._phone_1

    @phone_1.setter
    def phone_1(self, phone_1):
        """Sets the phone_1 of this Customer.


        :param phone_1: The phone_1 of this Customer.  # noqa: E501
        :type: str
        """

        self._phone_1 = phone_1

    @property
    def phone_2(self):
        """Gets the phone_2 of this Customer.  # noqa: E501


        :return: The phone_2 of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._phone_2

    @phone_2.setter
    def phone_2(self, phone_2):
        """Sets the phone_2 of this Customer.


        :param phone_2: The phone_2 of this Customer.  # noqa: E501
        :type: str
        """

        self._phone_2 = phone_2

    @property
    def postbox(self):
        """Gets the postbox of this Customer.  # noqa: E501


        :return: The postbox of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._postbox

    @postbox.setter
    def postbox(self, postbox):
        """Sets the postbox of this Customer.


        :param postbox: The postbox of this Customer.  # noqa: E501
        :type: str
        """

        self._postbox = postbox

    @property
    def postbox_city(self):
        """Gets the postbox_city of this Customer.  # noqa: E501


        :return: The postbox_city of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._postbox_city

    @postbox_city.setter
    def postbox_city(self, postbox_city):
        """Sets the postbox_city of this Customer.


        :param postbox_city: The postbox_city of this Customer.  # noqa: E501
        :type: str
        """

        self._postbox_city = postbox_city

    @property
    def postbox_country(self):
        """Gets the postbox_country of this Customer.  # noqa: E501


        :return: The postbox_country of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._postbox_country

    @postbox_country.setter
    def postbox_country(self, postbox_country):
        """Sets the postbox_country of this Customer.


        :param postbox_country: The postbox_country of this Customer.  # noqa: E501
        :type: str
        """

        self._postbox_country = postbox_country

    @property
    def postbox_zip_code(self):
        """Gets the postbox_zip_code of this Customer.  # noqa: E501


        :return: The postbox_zip_code of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._postbox_zip_code

    @postbox_zip_code.setter
    def postbox_zip_code(self, postbox_zip_code):
        """Sets the postbox_zip_code of this Customer.


        :param postbox_zip_code: The postbox_zip_code of this Customer.  # noqa: E501
        :type: str
        """

        self._postbox_zip_code = postbox_zip_code

    @property
    def sale_price_level(self):
        """Gets the sale_price_level of this Customer.  # noqa: E501


        :return: The sale_price_level of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._sale_price_level

    @sale_price_level.setter
    def sale_price_level(self, sale_price_level):
        """Sets the sale_price_level of this Customer.


        :param sale_price_level: The sale_price_level of this Customer.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"SALEPRICE2", "SALEPRICE3", "SALEPRICE4", "SALEPRICE5", "SALEPRICE6", "SALEPRICE7", "SALEPRICE8", "SALEPRICE9", "SALEPRICE10"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and sale_price_level not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `sale_price_level` ({0}), must be one of {1}"  # noqa: E501
                .format(sale_price_level, allowed_values)
            )

        self._sale_price_level = sale_price_level

    @property
    def salutation(self):
        """Gets the salutation of this Customer.  # noqa: E501

        0 = nothing, 1 = Mr, 2 = Mrs, 3 = Company, 4 = Mr & Mrs, 5 = Married couple, 6 = Family  # noqa: E501

        :return: The salutation of this Customer.  # noqa: E501
        :rtype: int
        """
        return self._salutation

    @salutation.setter
    def salutation(self, salutation):
        """Sets the salutation of this Customer.

        0 = nothing, 1 = Mr, 2 = Mrs, 3 = Company, 4 = Mr & Mrs, 5 = Married couple, 6 = Family  # noqa: E501

        :param salutation: The salutation of this Customer.  # noqa: E501
        :type: int
        """

        self._salutation = salutation

    @property
    def sepa_agreement(self):
        """Gets the sepa_agreement of this Customer.  # noqa: E501

        BASIC = SEPA-Basislastschrift, COR1 = SEPA-Basislastschrift COR1, COMPANY = SEPA-Firmenlastschrift, NULL = Noch kein Mandat erteilt  # noqa: E501

        :return: The sepa_agreement of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._sepa_agreement

    @sepa_agreement.setter
    def sepa_agreement(self, sepa_agreement):
        """Sets the sepa_agreement of this Customer.

        BASIC = SEPA-Basislastschrift, COR1 = SEPA-Basislastschrift COR1, COMPANY = SEPA-Firmenlastschrift, NULL = Noch kein Mandat erteilt  # noqa: E501

        :param sepa_agreement: The sepa_agreement of this Customer.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"BASIC", "COR1", "COMPANY", "NULL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and sepa_agreement not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `sepa_agreement` ({0}), must be one of {1}"  # noqa: E501
                .format(sepa_agreement, allowed_values)
            )

        self._sepa_agreement = sepa_agreement

    @property
    def sepa_agreement_date(self):
        """Gets the sepa_agreement_date of this Customer.  # noqa: E501


        :return: The sepa_agreement_date of this Customer.  # noqa: E501
        :rtype: date
        """
        return self._sepa_agreement_date

    @sepa_agreement_date.setter
    def sepa_agreement_date(self, sepa_agreement_date):
        """Sets the sepa_agreement_date of this Customer.


        :param sepa_agreement_date: The sepa_agreement_date of this Customer.  # noqa: E501
        :type: date
        """

        self._sepa_agreement_date = sepa_agreement_date

    @property
    def sepa_mandate_reference(self):
        """Gets the sepa_mandate_reference of this Customer.  # noqa: E501


        :return: The sepa_mandate_reference of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._sepa_mandate_reference

    @sepa_mandate_reference.setter
    def sepa_mandate_reference(self, sepa_mandate_reference):
        """Sets the sepa_mandate_reference of this Customer.


        :param sepa_mandate_reference: The sepa_mandate_reference of this Customer.  # noqa: E501
        :type: str
        """

        self._sepa_mandate_reference = sepa_mandate_reference

    @property
    def since_date(self):
        """Gets the since_date of this Customer.  # noqa: E501


        :return: The since_date of this Customer.  # noqa: E501
        :rtype: date
        """
        return self._since_date

    @since_date.setter
    def since_date(self, since_date):
        """Sets the since_date of this Customer.


        :param since_date: The since_date of this Customer.  # noqa: E501
        :type: date
        """

        self._since_date = since_date

    @property
    def street(self):
        """Gets the street of this Customer.  # noqa: E501


        :return: The street of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Customer.


        :param street: The street of this Customer.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def suffix_1(self):
        """Gets the suffix_1 of this Customer.  # noqa: E501


        :return: The suffix_1 of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._suffix_1

    @suffix_1.setter
    def suffix_1(self, suffix_1):
        """Sets the suffix_1 of this Customer.


        :param suffix_1: The suffix_1 of this Customer.  # noqa: E501
        :type: str
        """

        self._suffix_1 = suffix_1

    @property
    def suffix_2(self):
        """Gets the suffix_2 of this Customer.  # noqa: E501


        :return: The suffix_2 of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._suffix_2

    @suffix_2.setter
    def suffix_2(self, suffix_2):
        """Sets the suffix_2 of this Customer.


        :param suffix_2: The suffix_2 of this Customer.  # noqa: E501
        :type: str
        """

        self._suffix_2 = suffix_2

    @property
    def tax_number(self):
        """Gets the tax_number of this Customer.  # noqa: E501


        :return: The tax_number of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._tax_number

    @tax_number.setter
    def tax_number(self, tax_number):
        """Sets the tax_number of this Customer.


        :param tax_number: The tax_number of this Customer.  # noqa: E501
        :type: str
        """

        self._tax_number = tax_number

    @property
    def court(self):
        """Gets the court of this Customer.  # noqa: E501


        :return: The court of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._court

    @court.setter
    def court(self, court):
        """Sets the court of this Customer.


        :param court: The court of this Customer.  # noqa: E501
        :type: str
        """

        self._court = court

    @property
    def court_registry_number(self):
        """Gets the court_registry_number of this Customer.  # noqa: E501


        :return: The court_registry_number of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._court_registry_number

    @court_registry_number.setter
    def court_registry_number(self, court_registry_number):
        """Sets the court_registry_number of this Customer.


        :param court_registry_number: The court_registry_number of this Customer.  # noqa: E501
        :type: str
        """

        self._court_registry_number = court_registry_number

    @property
    def tax_options(self):
        """Gets the tax_options of this Customer.  # noqa: E501

        nStb = Nicht steuerbar (Drittland), nStbUstID = Nicht steuerbar (EU mit USt-IdNr.), nStbNoneUstID = Nicht steuerbar (EU ohne USt-IdNr.), revc = Steuerschuldwechsel §13b (Inland), IG = Innergemeinschaftliche Lieferung, AL = Ausfuhrlieferung, sStfr = sonstige Steuerbefreiung, NULL = Umsatzsteuerpflichtig  # noqa: E501

        :return: The tax_options of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._tax_options

    @tax_options.setter
    def tax_options(self, tax_options):
        """Sets the tax_options of this Customer.

        nStb = Nicht steuerbar (Drittland), nStbUstID = Nicht steuerbar (EU mit USt-IdNr.), nStbNoneUstID = Nicht steuerbar (EU ohne USt-IdNr.), revc = Steuerschuldwechsel §13b (Inland), IG = Innergemeinschaftliche Lieferung, AL = Ausfuhrlieferung, sStfr = sonstige Steuerbefreiung, NULL = Umsatzsteuerpflichtig  # noqa: E501

        :param tax_options: The tax_options of this Customer.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"nStb", "nStbUstID", "nStbNoneUstID", "nStbIm", "revc", "IG", "AL", "sStfr", "NULL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and tax_options not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `tax_options` ({0}), must be one of {1}"  # noqa: E501
                .format(tax_options, allowed_values)
            )

        self._tax_options = tax_options

    @property
    def title(self):
        """Gets the title of this Customer.  # noqa: E501


        :return: The title of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Customer.


        :param title: The title of this Customer.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def vat_identifier(self):
        """Gets the vat_identifier of this Customer.  # noqa: E501


        :return: The vat_identifier of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._vat_identifier

    @vat_identifier.setter
    def vat_identifier(self, vat_identifier):
        """Sets the vat_identifier of this Customer.


        :param vat_identifier: The vat_identifier of this Customer.  # noqa: E501
        :type: str
        """

        self._vat_identifier = vat_identifier

    @property
    def zip_code(self):
        """Gets the zip_code of this Customer.  # noqa: E501


        :return: The zip_code of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this Customer.


        :param zip_code: The zip_code of this Customer.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Customer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Customer):
            return True

        return self.to_dict() != other.to_dict()
