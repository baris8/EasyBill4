# coding: utf-8

"""
    easybill REST API

     The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.  # noqa: E501

    The version of the OpenAPI document: 1.48.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DocumentAddress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'salutation': 'int',
        'personal': 'bool',
        'title': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'suffix_1': 'str',
        'suffix_2': 'str',
        'company_name': 'str',
        'street': 'str',
        'zip_code': 'str',
        'city': 'str',
        'country': 'str'
    }

    attribute_map = {
        'salutation': 'salutation',
        'personal': 'personal',
        'title': 'title',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'suffix_1': 'suffix_1',
        'suffix_2': 'suffix_2',
        'company_name': 'company_name',
        'street': 'street',
        'zip_code': 'zip_code',
        'city': 'city',
        'country': 'country'
    }

    def __init__(self, salutation=None, personal=None, title=None, first_name=None, last_name=None, suffix_1=None, suffix_2=None, company_name=None, street=None, zip_code=None, city=None, country=None, local_vars_configuration=None):  # noqa: E501
        """DocumentAddress - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._salutation = None
        self._personal = None
        self._title = None
        self._first_name = None
        self._last_name = None
        self._suffix_1 = None
        self._suffix_2 = None
        self._company_name = None
        self._street = None
        self._zip_code = None
        self._city = None
        self._country = None
        self.discriminator = None

        if salutation is not None:
            self.salutation = salutation
        if personal is not None:
            self.personal = personal
        if title is not None:
            self.title = title
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if suffix_1 is not None:
            self.suffix_1 = suffix_1
        if suffix_2 is not None:
            self.suffix_2 = suffix_2
        if company_name is not None:
            self.company_name = company_name
        if street is not None:
            self.street = street
        if zip_code is not None:
            self.zip_code = zip_code
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country

    @property
    def salutation(self):
        """Gets the salutation of this DocumentAddress.  # noqa: E501

        0: empty<br/> 1: Herrn<br/> 2: Frau<br/> 3: Firma<br/> 4: Herrn und Frau<br/> 5: Eheleute<br/> 6: Familie  # noqa: E501

        :return: The salutation of this DocumentAddress.  # noqa: E501
        :rtype: int
        """
        return self._salutation

    @salutation.setter
    def salutation(self, salutation):
        """Sets the salutation of this DocumentAddress.

        0: empty<br/> 1: Herrn<br/> 2: Frau<br/> 3: Firma<br/> 4: Herrn und Frau<br/> 5: Eheleute<br/> 6: Familie  # noqa: E501

        :param salutation: The salutation of this DocumentAddress.  # noqa: E501
        :type: int
        """

        self._salutation = salutation

    @property
    def personal(self):
        """Gets the personal of this DocumentAddress.  # noqa: E501


        :return: The personal of this DocumentAddress.  # noqa: E501
        :rtype: bool
        """
        return self._personal

    @personal.setter
    def personal(self, personal):
        """Sets the personal of this DocumentAddress.


        :param personal: The personal of this DocumentAddress.  # noqa: E501
        :type: bool
        """

        self._personal = personal

    @property
    def title(self):
        """Gets the title of this DocumentAddress.  # noqa: E501


        :return: The title of this DocumentAddress.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DocumentAddress.


        :param title: The title of this DocumentAddress.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def first_name(self):
        """Gets the first_name of this DocumentAddress.  # noqa: E501


        :return: The first_name of this DocumentAddress.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this DocumentAddress.


        :param first_name: The first_name of this DocumentAddress.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this DocumentAddress.  # noqa: E501


        :return: The last_name of this DocumentAddress.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this DocumentAddress.


        :param last_name: The last_name of this DocumentAddress.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def suffix_1(self):
        """Gets the suffix_1 of this DocumentAddress.  # noqa: E501


        :return: The suffix_1 of this DocumentAddress.  # noqa: E501
        :rtype: str
        """
        return self._suffix_1

    @suffix_1.setter
    def suffix_1(self, suffix_1):
        """Sets the suffix_1 of this DocumentAddress.


        :param suffix_1: The suffix_1 of this DocumentAddress.  # noqa: E501
        :type: str
        """

        self._suffix_1 = suffix_1

    @property
    def suffix_2(self):
        """Gets the suffix_2 of this DocumentAddress.  # noqa: E501


        :return: The suffix_2 of this DocumentAddress.  # noqa: E501
        :rtype: str
        """
        return self._suffix_2

    @suffix_2.setter
    def suffix_2(self, suffix_2):
        """Sets the suffix_2 of this DocumentAddress.


        :param suffix_2: The suffix_2 of this DocumentAddress.  # noqa: E501
        :type: str
        """

        self._suffix_2 = suffix_2

    @property
    def company_name(self):
        """Gets the company_name of this DocumentAddress.  # noqa: E501


        :return: The company_name of this DocumentAddress.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this DocumentAddress.


        :param company_name: The company_name of this DocumentAddress.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def street(self):
        """Gets the street of this DocumentAddress.  # noqa: E501


        :return: The street of this DocumentAddress.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this DocumentAddress.


        :param street: The street of this DocumentAddress.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def zip_code(self):
        """Gets the zip_code of this DocumentAddress.  # noqa: E501


        :return: The zip_code of this DocumentAddress.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this DocumentAddress.


        :param zip_code: The zip_code of this DocumentAddress.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    @property
    def city(self):
        """Gets the city of this DocumentAddress.  # noqa: E501


        :return: The city of this DocumentAddress.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this DocumentAddress.


        :param city: The city of this DocumentAddress.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this DocumentAddress.  # noqa: E501


        :return: The country of this DocumentAddress.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this DocumentAddress.


        :param country: The country of this DocumentAddress.  # noqa: E501
        :type: str
        """

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentAddress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DocumentAddress):
            return True

        return self.to_dict() != other.to_dict()
