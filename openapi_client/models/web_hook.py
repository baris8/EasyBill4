# coding: utf-8

"""
    easybill REST API

     The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.  # noqa: E501

    The version of the OpenAPI document: 1.48.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class WebHook(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content_type': 'str',
        'description': 'str',
        'events': 'list[str]',
        'id': 'int',
        'is_active': 'bool',
        'last_response': 'WebHookLastResponse',
        'secret': 'str',
        'url': 'str'
    }

    attribute_map = {
        'content_type': 'content_type',
        'description': 'description',
        'events': 'events',
        'id': 'id',
        'is_active': 'is_active',
        'last_response': 'last_response',
        'secret': 'secret',
        'url': 'url'
    }

    def __init__(self, content_type=None, description=None, events=None, id=None, is_active=False, last_response=None, secret=None, url=None, local_vars_configuration=None):  # noqa: E501
        """WebHook - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._content_type = None
        self._description = None
        self._events = None
        self._id = None
        self._is_active = None
        self._last_response = None
        self._secret = None
        self._url = None
        self.discriminator = None

        self.content_type = content_type
        self.description = description
        self.events = events
        if id is not None:
            self.id = id
        if is_active is not None:
            self.is_active = is_active
        if last_response is not None:
            self.last_response = last_response
        self.secret = secret
        self.url = url

    @property
    def content_type(self):
        """Gets the content_type of this WebHook.  # noqa: E501


        :return: The content_type of this WebHook.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this WebHook.


        :param content_type: The content_type of this WebHook.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and content_type is None:  # noqa: E501
            raise ValueError("Invalid value for `content_type`, must not be `None`")  # noqa: E501
        allowed_values = ["form", "json"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and content_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"  # noqa: E501
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def description(self):
        """Gets the description of this WebHook.  # noqa: E501


        :return: The description of this WebHook.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WebHook.


        :param description: The description of this WebHook.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def events(self):
        """Gets the events of this WebHook.  # noqa: E501


        :return: The events of this WebHook.  # noqa: E501
        :rtype: list[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this WebHook.


        :param events: The events of this WebHook.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and events is None:  # noqa: E501
            raise ValueError("Invalid value for `events`, must not be `None`")  # noqa: E501
        allowed_values = ["document.create", "document.update", "document.completed", "document.deleted", "document.payment_add", "document.payment_delete", "customer.create", "customer.update", "customer.delete", "contact.create", "contact.update", "contact.delete", "position.create", "position.update", "position.delete", "postbox.create", "postbox.update", "postbox.delete", "postbox.sent"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(events).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `events` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(events) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._events = events

    @property
    def id(self):
        """Gets the id of this WebHook.  # noqa: E501


        :return: The id of this WebHook.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebHook.


        :param id: The id of this WebHook.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this WebHook.  # noqa: E501


        :return: The is_active of this WebHook.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this WebHook.


        :param is_active: The is_active of this WebHook.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def last_response(self):
        """Gets the last_response of this WebHook.  # noqa: E501


        :return: The last_response of this WebHook.  # noqa: E501
        :rtype: WebHookLastResponse
        """
        return self._last_response

    @last_response.setter
    def last_response(self, last_response):
        """Sets the last_response of this WebHook.


        :param last_response: The last_response of this WebHook.  # noqa: E501
        :type: WebHookLastResponse
        """

        self._last_response = last_response

    @property
    def secret(self):
        """Gets the secret of this WebHook.  # noqa: E501


        :return: The secret of this WebHook.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this WebHook.


        :param secret: The secret of this WebHook.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and secret is None:  # noqa: E501
            raise ValueError("Invalid value for `secret`, must not be `None`")  # noqa: E501

        self._secret = secret

    @property
    def url(self):
        """Gets the url of this WebHook.  # noqa: E501


        :return: The url of this WebHook.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebHook.


        :param url: The url of this WebHook.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebHook):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WebHook):
            return True

        return self.to_dict() != other.to_dict()
