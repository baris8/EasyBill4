# coding: utf-8

"""
    easybill REST API

     The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.  # noqa: E501

    The version of the OpenAPI document: 1.48.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DocumentPosition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'number': 'str',
        'description': 'str',
        'quantity': 'float',
        'quantity_str': 'str',
        'unit': 'str',
        'type': 'str',
        'position': 'int',
        'single_price_net': 'float',
        'single_price_gross': 'float',
        'vat_percent': 'float',
        'discount': 'float',
        'discount_type': 'str',
        'position_id': 'int',
        'total_price_net': 'float',
        'total_price_gross': 'float',
        'total_vat': 'float',
        'serial_number_id': 'str',
        'serial_number': 'str',
        'booking_account': 'str',
        'export_cost_1': 'str',
        'export_cost_2': 'str',
        'cost_price_net': 'float',
        'cost_price_total': 'float',
        'cost_price_charge': 'float',
        'cost_price_charge_type': 'str',
        'item_type': 'str',
        'id': 'int'
    }

    attribute_map = {
        'number': 'number',
        'description': 'description',
        'quantity': 'quantity',
        'quantity_str': 'quantity_str',
        'unit': 'unit',
        'type': 'type',
        'position': 'position',
        'single_price_net': 'single_price_net',
        'single_price_gross': 'single_price_gross',
        'vat_percent': 'vat_percent',
        'discount': 'discount',
        'discount_type': 'discount_type',
        'position_id': 'position_id',
        'total_price_net': 'total_price_net',
        'total_price_gross': 'total_price_gross',
        'total_vat': 'total_vat',
        'serial_number_id': 'serial_number_id',
        'serial_number': 'serial_number',
        'booking_account': 'booking_account',
        'export_cost_1': 'export_cost_1',
        'export_cost_2': 'export_cost_2',
        'cost_price_net': 'cost_price_net',
        'cost_price_total': 'cost_price_total',
        'cost_price_charge': 'cost_price_charge',
        'cost_price_charge_type': 'cost_price_charge_type',
        'item_type': 'itemType',
        'id': 'id'
    }

    def __init__(self, number='null', description='null', quantity=1.0, quantity_str=None, unit='null', type='POSITION', position=None, single_price_net=None, single_price_gross=None, vat_percent=0.0, discount=None, discount_type='null', position_id=None, total_price_net=None, total_price_gross=None, total_vat=None, serial_number_id=None, serial_number=None, booking_account='null', export_cost_1='null', export_cost_2='null', cost_price_net=None, cost_price_total=None, cost_price_charge=None, cost_price_charge_type=None, item_type='UNDEFINED', id=None, local_vars_configuration=None):  # noqa: E501
        """DocumentPosition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._number = None
        self._description = None
        self._quantity = None
        self._quantity_str = None
        self._unit = None
        self._type = None
        self._position = None
        self._single_price_net = None
        self._single_price_gross = None
        self._vat_percent = None
        self._discount = None
        self._discount_type = None
        self._position_id = None
        self._total_price_net = None
        self._total_price_gross = None
        self._total_vat = None
        self._serial_number_id = None
        self._serial_number = None
        self._booking_account = None
        self._export_cost_1 = None
        self._export_cost_2 = None
        self._cost_price_net = None
        self._cost_price_total = None
        self._cost_price_charge = None
        self._cost_price_charge_type = None
        self._item_type = None
        self._id = None
        self.discriminator = None

        self.number = number
        self.description = description
        if quantity is not None:
            self.quantity = quantity
        if quantity_str is not None:
            self.quantity_str = quantity_str
        self.unit = unit
        if type is not None:
            self.type = type
        if position is not None:
            self.position = position
        self.single_price_net = single_price_net
        if single_price_gross is not None:
            self.single_price_gross = single_price_gross
        if vat_percent is not None:
            self.vat_percent = vat_percent
        self.discount = discount
        self.discount_type = discount_type
        self.position_id = position_id
        if total_price_net is not None:
            self.total_price_net = total_price_net
        if total_price_gross is not None:
            self.total_price_gross = total_price_gross
        if total_vat is not None:
            self.total_vat = total_vat
        if serial_number_id is not None:
            self.serial_number_id = serial_number_id
        if serial_number is not None:
            self.serial_number = serial_number
        self.booking_account = booking_account
        self.export_cost_1 = export_cost_1
        self.export_cost_2 = export_cost_2
        self.cost_price_net = cost_price_net
        if cost_price_total is not None:
            self.cost_price_total = cost_price_total
        if cost_price_charge is not None:
            self.cost_price_charge = cost_price_charge
        if cost_price_charge_type is not None:
            self.cost_price_charge_type = cost_price_charge_type
        if item_type is not None:
            self.item_type = item_type
        if id is not None:
            self.id = id

    @property
    def number(self):
        """Gets the number of this DocumentPosition.  # noqa: E501


        :return: The number of this DocumentPosition.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this DocumentPosition.


        :param number: The number of this DocumentPosition.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def description(self):
        """Gets the description of this DocumentPosition.  # noqa: E501


        :return: The description of this DocumentPosition.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DocumentPosition.


        :param description: The description of this DocumentPosition.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def quantity(self):
        """Gets the quantity of this DocumentPosition.  # noqa: E501


        :return: The quantity of this DocumentPosition.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this DocumentPosition.


        :param quantity: The quantity of this DocumentPosition.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def quantity_str(self):
        """Gets the quantity_str of this DocumentPosition.  # noqa: E501

        Use quantity_str if you want to set a quantity like: 1:30 h or 3x5 m. quantity_str overwrites quantity.  # noqa: E501

        :return: The quantity_str of this DocumentPosition.  # noqa: E501
        :rtype: str
        """
        return self._quantity_str

    @quantity_str.setter
    def quantity_str(self, quantity_str):
        """Sets the quantity_str of this DocumentPosition.

        Use quantity_str if you want to set a quantity like: 1:30 h or 3x5 m. quantity_str overwrites quantity.  # noqa: E501

        :param quantity_str: The quantity_str of this DocumentPosition.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                quantity_str is not None and len(quantity_str) > 10):
            raise ValueError("Invalid value for `quantity_str`, length must be less than or equal to `10`")  # noqa: E501

        self._quantity_str = quantity_str

    @property
    def unit(self):
        """Gets the unit of this DocumentPosition.  # noqa: E501


        :return: The unit of this DocumentPosition.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this DocumentPosition.


        :param unit: The unit of this DocumentPosition.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def type(self):
        """Gets the type of this DocumentPosition.  # noqa: E501


        :return: The type of this DocumentPosition.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DocumentPosition.


        :param type: The type of this DocumentPosition.  # noqa: E501
        :type: str
        """
        allowed_values = ["POSITION", "POSITION_NOCALC", "TEXT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def position(self):
        """Gets the position of this DocumentPosition.  # noqa: E501

        Automatic by default (first item: 1, second item: 2, ...)  # noqa: E501

        :return: The position of this DocumentPosition.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this DocumentPosition.

        Automatic by default (first item: 1, second item: 2, ...)  # noqa: E501

        :param position: The position of this DocumentPosition.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def single_price_net(self):
        """Gets the single_price_net of this DocumentPosition.  # noqa: E501


        :return: The single_price_net of this DocumentPosition.  # noqa: E501
        :rtype: float
        """
        return self._single_price_net

    @single_price_net.setter
    def single_price_net(self, single_price_net):
        """Sets the single_price_net of this DocumentPosition.


        :param single_price_net: The single_price_net of this DocumentPosition.  # noqa: E501
        :type: float
        """

        self._single_price_net = single_price_net

    @property
    def single_price_gross(self):
        """Gets the single_price_gross of this DocumentPosition.  # noqa: E501


        :return: The single_price_gross of this DocumentPosition.  # noqa: E501
        :rtype: float
        """
        return self._single_price_gross

    @single_price_gross.setter
    def single_price_gross(self, single_price_gross):
        """Sets the single_price_gross of this DocumentPosition.


        :param single_price_gross: The single_price_gross of this DocumentPosition.  # noqa: E501
        :type: float
        """

        self._single_price_gross = single_price_gross

    @property
    def vat_percent(self):
        """Gets the vat_percent of this DocumentPosition.  # noqa: E501


        :return: The vat_percent of this DocumentPosition.  # noqa: E501
        :rtype: float
        """
        return self._vat_percent

    @vat_percent.setter
    def vat_percent(self, vat_percent):
        """Sets the vat_percent of this DocumentPosition.


        :param vat_percent: The vat_percent of this DocumentPosition.  # noqa: E501
        :type: float
        """

        self._vat_percent = vat_percent

    @property
    def discount(self):
        """Gets the discount of this DocumentPosition.  # noqa: E501


        :return: The discount of this DocumentPosition.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this DocumentPosition.


        :param discount: The discount of this DocumentPosition.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def discount_type(self):
        """Gets the discount_type of this DocumentPosition.  # noqa: E501


        :return: The discount_type of this DocumentPosition.  # noqa: E501
        :rtype: str
        """
        return self._discount_type

    @discount_type.setter
    def discount_type(self, discount_type):
        """Sets the discount_type of this DocumentPosition.


        :param discount_type: The discount_type of this DocumentPosition.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"PERCENT", "AMOUNT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and discount_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `discount_type` ({0}), must be one of {1}"  # noqa: E501
                .format(discount_type, allowed_values)
            )

        self._discount_type = discount_type

    @property
    def position_id(self):
        """Gets the position_id of this DocumentPosition.  # noqa: E501

        If set, values are copied from the referenced position  # noqa: E501

        :return: The position_id of this DocumentPosition.  # noqa: E501
        :rtype: int
        """
        return self._position_id

    @position_id.setter
    def position_id(self, position_id):
        """Sets the position_id of this DocumentPosition.

        If set, values are copied from the referenced position  # noqa: E501

        :param position_id: The position_id of this DocumentPosition.  # noqa: E501
        :type: int
        """

        self._position_id = position_id

    @property
    def total_price_net(self):
        """Gets the total_price_net of this DocumentPosition.  # noqa: E501


        :return: The total_price_net of this DocumentPosition.  # noqa: E501
        :rtype: float
        """
        return self._total_price_net

    @total_price_net.setter
    def total_price_net(self, total_price_net):
        """Sets the total_price_net of this DocumentPosition.


        :param total_price_net: The total_price_net of this DocumentPosition.  # noqa: E501
        :type: float
        """

        self._total_price_net = total_price_net

    @property
    def total_price_gross(self):
        """Gets the total_price_gross of this DocumentPosition.  # noqa: E501


        :return: The total_price_gross of this DocumentPosition.  # noqa: E501
        :rtype: float
        """
        return self._total_price_gross

    @total_price_gross.setter
    def total_price_gross(self, total_price_gross):
        """Sets the total_price_gross of this DocumentPosition.


        :param total_price_gross: The total_price_gross of this DocumentPosition.  # noqa: E501
        :type: float
        """

        self._total_price_gross = total_price_gross

    @property
    def total_vat(self):
        """Gets the total_vat of this DocumentPosition.  # noqa: E501


        :return: The total_vat of this DocumentPosition.  # noqa: E501
        :rtype: float
        """
        return self._total_vat

    @total_vat.setter
    def total_vat(self, total_vat):
        """Sets the total_vat of this DocumentPosition.


        :param total_vat: The total_vat of this DocumentPosition.  # noqa: E501
        :type: float
        """

        self._total_vat = total_vat

    @property
    def serial_number_id(self):
        """Gets the serial_number_id of this DocumentPosition.  # noqa: E501


        :return: The serial_number_id of this DocumentPosition.  # noqa: E501
        :rtype: str
        """
        return self._serial_number_id

    @serial_number_id.setter
    def serial_number_id(self, serial_number_id):
        """Sets the serial_number_id of this DocumentPosition.


        :param serial_number_id: The serial_number_id of this DocumentPosition.  # noqa: E501
        :type: str
        """

        self._serial_number_id = serial_number_id

    @property
    def serial_number(self):
        """Gets the serial_number of this DocumentPosition.  # noqa: E501


        :return: The serial_number of this DocumentPosition.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this DocumentPosition.


        :param serial_number: The serial_number of this DocumentPosition.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def booking_account(self):
        """Gets the booking_account of this DocumentPosition.  # noqa: E501


        :return: The booking_account of this DocumentPosition.  # noqa: E501
        :rtype: str
        """
        return self._booking_account

    @booking_account.setter
    def booking_account(self, booking_account):
        """Sets the booking_account of this DocumentPosition.


        :param booking_account: The booking_account of this DocumentPosition.  # noqa: E501
        :type: str
        """

        self._booking_account = booking_account

    @property
    def export_cost_1(self):
        """Gets the export_cost_1 of this DocumentPosition.  # noqa: E501


        :return: The export_cost_1 of this DocumentPosition.  # noqa: E501
        :rtype: str
        """
        return self._export_cost_1

    @export_cost_1.setter
    def export_cost_1(self, export_cost_1):
        """Sets the export_cost_1 of this DocumentPosition.


        :param export_cost_1: The export_cost_1 of this DocumentPosition.  # noqa: E501
        :type: str
        """

        self._export_cost_1 = export_cost_1

    @property
    def export_cost_2(self):
        """Gets the export_cost_2 of this DocumentPosition.  # noqa: E501


        :return: The export_cost_2 of this DocumentPosition.  # noqa: E501
        :rtype: str
        """
        return self._export_cost_2

    @export_cost_2.setter
    def export_cost_2(self, export_cost_2):
        """Sets the export_cost_2 of this DocumentPosition.


        :param export_cost_2: The export_cost_2 of this DocumentPosition.  # noqa: E501
        :type: str
        """

        self._export_cost_2 = export_cost_2

    @property
    def cost_price_net(self):
        """Gets the cost_price_net of this DocumentPosition.  # noqa: E501


        :return: The cost_price_net of this DocumentPosition.  # noqa: E501
        :rtype: float
        """
        return self._cost_price_net

    @cost_price_net.setter
    def cost_price_net(self, cost_price_net):
        """Sets the cost_price_net of this DocumentPosition.


        :param cost_price_net: The cost_price_net of this DocumentPosition.  # noqa: E501
        :type: float
        """

        self._cost_price_net = cost_price_net

    @property
    def cost_price_total(self):
        """Gets the cost_price_total of this DocumentPosition.  # noqa: E501


        :return: The cost_price_total of this DocumentPosition.  # noqa: E501
        :rtype: float
        """
        return self._cost_price_total

    @cost_price_total.setter
    def cost_price_total(self, cost_price_total):
        """Sets the cost_price_total of this DocumentPosition.


        :param cost_price_total: The cost_price_total of this DocumentPosition.  # noqa: E501
        :type: float
        """

        self._cost_price_total = cost_price_total

    @property
    def cost_price_charge(self):
        """Gets the cost_price_charge of this DocumentPosition.  # noqa: E501


        :return: The cost_price_charge of this DocumentPosition.  # noqa: E501
        :rtype: float
        """
        return self._cost_price_charge

    @cost_price_charge.setter
    def cost_price_charge(self, cost_price_charge):
        """Sets the cost_price_charge of this DocumentPosition.


        :param cost_price_charge: The cost_price_charge of this DocumentPosition.  # noqa: E501
        :type: float
        """

        self._cost_price_charge = cost_price_charge

    @property
    def cost_price_charge_type(self):
        """Gets the cost_price_charge_type of this DocumentPosition.  # noqa: E501


        :return: The cost_price_charge_type of this DocumentPosition.  # noqa: E501
        :rtype: str
        """
        return self._cost_price_charge_type

    @cost_price_charge_type.setter
    def cost_price_charge_type(self, cost_price_charge_type):
        """Sets the cost_price_charge_type of this DocumentPosition.


        :param cost_price_charge_type: The cost_price_charge_type of this DocumentPosition.  # noqa: E501
        :type: str
        """
        allowed_values = ["PERCENT", "AMOUNT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and cost_price_charge_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `cost_price_charge_type` ({0}), must be one of {1}"  # noqa: E501
                .format(cost_price_charge_type, allowed_values)
            )

        self._cost_price_charge_type = cost_price_charge_type

    @property
    def item_type(self):
        """Gets the item_type of this DocumentPosition.  # noqa: E501


        :return: The item_type of this DocumentPosition.  # noqa: E501
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this DocumentPosition.


        :param item_type: The item_type of this DocumentPosition.  # noqa: E501
        :type: str
        """
        allowed_values = ["PRODUCT", "SERVICE", "UNDEFINED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and item_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `item_type` ({0}), must be one of {1}"  # noqa: E501
                .format(item_type, allowed_values)
            )

        self._item_type = item_type

    @property
    def id(self):
        """Gets the id of this DocumentPosition.  # noqa: E501


        :return: The id of this DocumentPosition.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentPosition.


        :param id: The id of this DocumentPosition.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentPosition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DocumentPosition):
            return True

        return self.to_dict() != other.to_dict()
