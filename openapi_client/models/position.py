# coding: utf-8

"""
    easybill REST API

     The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.  # noqa: E501

    The version of the OpenAPI document: 1.48.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Position(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'type': 'str',
        'number': 'str',
        'description': 'str',
        'note': 'str',
        'unit': 'str',
        'export_identifier': 'str',
        'export_identifier_extended': 'PositionExportIdentifierExtended',
        'login_id': 'int',
        'price_type': 'str',
        'vat_percent': 'float',
        'sale_price': 'float',
        'sale_price2': 'float',
        'sale_price3': 'float',
        'sale_price4': 'float',
        'sale_price5': 'float',
        'sale_price6': 'float',
        'sale_price7': 'float',
        'sale_price8': 'float',
        'sale_price9': 'float',
        'sale_price10': 'float',
        'cost_price': 'float',
        'export_cost1': 'str',
        'export_cost2': 'str',
        'group_id': 'int',
        'stock': 'str',
        'stock_count': 'int',
        'stock_limit_notify': 'bool',
        'stock_limit': 'int',
        'quantity': 'float'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'number': 'number',
        'description': 'description',
        'note': 'note',
        'unit': 'unit',
        'export_identifier': 'export_identifier',
        'export_identifier_extended': 'export_identifier_extended',
        'login_id': 'login_id',
        'price_type': 'price_type',
        'vat_percent': 'vat_percent',
        'sale_price': 'sale_price',
        'sale_price2': 'sale_price2',
        'sale_price3': 'sale_price3',
        'sale_price4': 'sale_price4',
        'sale_price5': 'sale_price5',
        'sale_price6': 'sale_price6',
        'sale_price7': 'sale_price7',
        'sale_price8': 'sale_price8',
        'sale_price9': 'sale_price9',
        'sale_price10': 'sale_price10',
        'cost_price': 'cost_price',
        'export_cost1': 'export_cost1',
        'export_cost2': 'export_cost2',
        'group_id': 'group_id',
        'stock': 'stock',
        'stock_count': 'stock_count',
        'stock_limit_notify': 'stock_limit_notify',
        'stock_limit': 'stock_limit',
        'quantity': 'quantity'
    }

    def __init__(self, id=None, type='PRODUCT', number=None, description=None, note='null', unit='null', export_identifier='null', export_identifier_extended=None, login_id=None, price_type='NETTO', vat_percent=19.0, sale_price=None, sale_price2=None, sale_price3=None, sale_price4=None, sale_price5=None, sale_price6=None, sale_price7=None, sale_price8=None, sale_price9=None, sale_price10=None, cost_price=None, export_cost1='null', export_cost2='null', group_id=None, stock='NO', stock_count=None, stock_limit_notify=False, stock_limit=None, quantity=None, local_vars_configuration=None):  # noqa: E501
        """Position - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._type = None
        self._number = None
        self._description = None
        self._note = None
        self._unit = None
        self._export_identifier = None
        self._export_identifier_extended = None
        self._login_id = None
        self._price_type = None
        self._vat_percent = None
        self._sale_price = None
        self._sale_price2 = None
        self._sale_price3 = None
        self._sale_price4 = None
        self._sale_price5 = None
        self._sale_price6 = None
        self._sale_price7 = None
        self._sale_price8 = None
        self._sale_price9 = None
        self._sale_price10 = None
        self._cost_price = None
        self._export_cost1 = None
        self._export_cost2 = None
        self._group_id = None
        self._stock = None
        self._stock_count = None
        self._stock_limit_notify = None
        self._stock_limit = None
        self._quantity = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        self.number = number
        self.description = description
        self.note = note
        self.unit = unit
        self.export_identifier = export_identifier
        if export_identifier_extended is not None:
            self.export_identifier_extended = export_identifier_extended
        if login_id is not None:
            self.login_id = login_id
        if price_type is not None:
            self.price_type = price_type
        if vat_percent is not None:
            self.vat_percent = vat_percent
        self.sale_price = sale_price
        self.sale_price2 = sale_price2
        self.sale_price3 = sale_price3
        self.sale_price4 = sale_price4
        self.sale_price5 = sale_price5
        self.sale_price6 = sale_price6
        self.sale_price7 = sale_price7
        self.sale_price8 = sale_price8
        self.sale_price9 = sale_price9
        self.sale_price10 = sale_price10
        self.cost_price = cost_price
        self.export_cost1 = export_cost1
        self.export_cost2 = export_cost2
        self.group_id = group_id
        if stock is not None:
            self.stock = stock
        if stock_count is not None:
            self.stock_count = stock_count
        if stock_limit_notify is not None:
            self.stock_limit_notify = stock_limit_notify
        if stock_limit is not None:
            self.stock_limit = stock_limit
        self.quantity = quantity

    @property
    def id(self):
        """Gets the id of this Position.  # noqa: E501


        :return: The id of this Position.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Position.


        :param id: The id of this Position.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Position.  # noqa: E501


        :return: The type of this Position.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Position.


        :param type: The type of this Position.  # noqa: E501
        :type: str
        """
        allowed_values = ["PRODUCT", "SERVICE", "TEXT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def number(self):
        """Gets the number of this Position.  # noqa: E501


        :return: The number of this Position.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Position.


        :param number: The number of this Position.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and number is None:  # noqa: E501
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def description(self):
        """Gets the description of this Position.  # noqa: E501

        The positions name or description  # noqa: E501

        :return: The description of this Position.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Position.

        The positions name or description  # noqa: E501

        :param description: The description of this Position.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def note(self):
        """Gets the note of this Position.  # noqa: E501

        Note for internal use  # noqa: E501

        :return: The note of this Position.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Position.

        Note for internal use  # noqa: E501

        :param note: The note of this Position.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def unit(self):
        """Gets the unit of this Position.  # noqa: E501


        :return: The unit of this Position.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Position.


        :param unit: The unit of this Position.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def export_identifier(self):
        """Gets the export_identifier of this Position.  # noqa: E501

        The FAS-Account is the four-digit revenue account, in which the revenue will be entered when doing the export to your tax consultant. In case you want to split your revenue to several revenue accounts, please talk to your tax consultant before, to guarantee an unobstructed use of the interface. For every revenue element, there are number ranges, which can be used. Please avoid using combinations of numbers, which can not be used by your tax consultant.  # noqa: E501

        :return: The export_identifier of this Position.  # noqa: E501
        :rtype: str
        """
        return self._export_identifier

    @export_identifier.setter
    def export_identifier(self, export_identifier):
        """Sets the export_identifier of this Position.

        The FAS-Account is the four-digit revenue account, in which the revenue will be entered when doing the export to your tax consultant. In case you want to split your revenue to several revenue accounts, please talk to your tax consultant before, to guarantee an unobstructed use of the interface. For every revenue element, there are number ranges, which can be used. Please avoid using combinations of numbers, which can not be used by your tax consultant.  # noqa: E501

        :param export_identifier: The export_identifier of this Position.  # noqa: E501
        :type: str
        """

        self._export_identifier = export_identifier

    @property
    def export_identifier_extended(self):
        """Gets the export_identifier_extended of this Position.  # noqa: E501


        :return: The export_identifier_extended of this Position.  # noqa: E501
        :rtype: PositionExportIdentifierExtended
        """
        return self._export_identifier_extended

    @export_identifier_extended.setter
    def export_identifier_extended(self, export_identifier_extended):
        """Sets the export_identifier_extended of this Position.


        :param export_identifier_extended: The export_identifier_extended of this Position.  # noqa: E501
        :type: PositionExportIdentifierExtended
        """

        self._export_identifier_extended = export_identifier_extended

    @property
    def login_id(self):
        """Gets the login_id of this Position.  # noqa: E501


        :return: The login_id of this Position.  # noqa: E501
        :rtype: int
        """
        return self._login_id

    @login_id.setter
    def login_id(self, login_id):
        """Sets the login_id of this Position.


        :param login_id: The login_id of this Position.  # noqa: E501
        :type: int
        """

        self._login_id = login_id

    @property
    def price_type(self):
        """Gets the price_type of this Position.  # noqa: E501


        :return: The price_type of this Position.  # noqa: E501
        :rtype: str
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type):
        """Sets the price_type of this Position.


        :param price_type: The price_type of this Position.  # noqa: E501
        :type: str
        """
        allowed_values = ["BRUTTO", "NETTO"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and price_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `price_type` ({0}), must be one of {1}"  # noqa: E501
                .format(price_type, allowed_values)
            )

        self._price_type = price_type

    @property
    def vat_percent(self):
        """Gets the vat_percent of this Position.  # noqa: E501


        :return: The vat_percent of this Position.  # noqa: E501
        :rtype: float
        """
        return self._vat_percent

    @vat_percent.setter
    def vat_percent(self, vat_percent):
        """Sets the vat_percent of this Position.


        :param vat_percent: The vat_percent of this Position.  # noqa: E501
        :type: float
        """

        self._vat_percent = vat_percent

    @property
    def sale_price(self):
        """Gets the sale_price of this Position.  # noqa: E501

        Price in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :return: The sale_price of this Position.  # noqa: E501
        :rtype: float
        """
        return self._sale_price

    @sale_price.setter
    def sale_price(self, sale_price):
        """Sets the sale_price of this Position.

        Price in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :param sale_price: The sale_price of this Position.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and sale_price is None:  # noqa: E501
            raise ValueError("Invalid value for `sale_price`, must not be `None`")  # noqa: E501

        self._sale_price = sale_price

    @property
    def sale_price2(self):
        """Gets the sale_price2 of this Position.  # noqa: E501

        Price for customers of group 2 in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :return: The sale_price2 of this Position.  # noqa: E501
        :rtype: float
        """
        return self._sale_price2

    @sale_price2.setter
    def sale_price2(self, sale_price2):
        """Sets the sale_price2 of this Position.

        Price for customers of group 2 in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :param sale_price2: The sale_price2 of this Position.  # noqa: E501
        :type: float
        """

        self._sale_price2 = sale_price2

    @property
    def sale_price3(self):
        """Gets the sale_price3 of this Position.  # noqa: E501

        Price for customers of group 3 in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :return: The sale_price3 of this Position.  # noqa: E501
        :rtype: float
        """
        return self._sale_price3

    @sale_price3.setter
    def sale_price3(self, sale_price3):
        """Sets the sale_price3 of this Position.

        Price for customers of group 3 in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :param sale_price3: The sale_price3 of this Position.  # noqa: E501
        :type: float
        """

        self._sale_price3 = sale_price3

    @property
    def sale_price4(self):
        """Gets the sale_price4 of this Position.  # noqa: E501

        Price for customers of group 4 in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :return: The sale_price4 of this Position.  # noqa: E501
        :rtype: float
        """
        return self._sale_price4

    @sale_price4.setter
    def sale_price4(self, sale_price4):
        """Sets the sale_price4 of this Position.

        Price for customers of group 4 in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :param sale_price4: The sale_price4 of this Position.  # noqa: E501
        :type: float
        """

        self._sale_price4 = sale_price4

    @property
    def sale_price5(self):
        """Gets the sale_price5 of this Position.  # noqa: E501

        Price for customers of group 5 in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :return: The sale_price5 of this Position.  # noqa: E501
        :rtype: float
        """
        return self._sale_price5

    @sale_price5.setter
    def sale_price5(self, sale_price5):
        """Sets the sale_price5 of this Position.

        Price for customers of group 5 in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :param sale_price5: The sale_price5 of this Position.  # noqa: E501
        :type: float
        """

        self._sale_price5 = sale_price5

    @property
    def sale_price6(self):
        """Gets the sale_price6 of this Position.  # noqa: E501

        Price for customers of group 6 in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :return: The sale_price6 of this Position.  # noqa: E501
        :rtype: float
        """
        return self._sale_price6

    @sale_price6.setter
    def sale_price6(self, sale_price6):
        """Sets the sale_price6 of this Position.

        Price for customers of group 6 in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :param sale_price6: The sale_price6 of this Position.  # noqa: E501
        :type: float
        """

        self._sale_price6 = sale_price6

    @property
    def sale_price7(self):
        """Gets the sale_price7 of this Position.  # noqa: E501

        Price for customers of group 7 in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :return: The sale_price7 of this Position.  # noqa: E501
        :rtype: float
        """
        return self._sale_price7

    @sale_price7.setter
    def sale_price7(self, sale_price7):
        """Sets the sale_price7 of this Position.

        Price for customers of group 7 in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :param sale_price7: The sale_price7 of this Position.  # noqa: E501
        :type: float
        """

        self._sale_price7 = sale_price7

    @property
    def sale_price8(self):
        """Gets the sale_price8 of this Position.  # noqa: E501

        Price for customers of group 8 in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :return: The sale_price8 of this Position.  # noqa: E501
        :rtype: float
        """
        return self._sale_price8

    @sale_price8.setter
    def sale_price8(self, sale_price8):
        """Sets the sale_price8 of this Position.

        Price for customers of group 8 in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :param sale_price8: The sale_price8 of this Position.  # noqa: E501
        :type: float
        """

        self._sale_price8 = sale_price8

    @property
    def sale_price9(self):
        """Gets the sale_price9 of this Position.  # noqa: E501

        Price for customers of group 9 in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :return: The sale_price9 of this Position.  # noqa: E501
        :rtype: float
        """
        return self._sale_price9

    @sale_price9.setter
    def sale_price9(self, sale_price9):
        """Sets the sale_price9 of this Position.

        Price for customers of group 9 in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :param sale_price9: The sale_price9 of this Position.  # noqa: E501
        :type: float
        """

        self._sale_price9 = sale_price9

    @property
    def sale_price10(self):
        """Gets the sale_price10 of this Position.  # noqa: E501

        Price for customers of group 10 in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :return: The sale_price10 of this Position.  # noqa: E501
        :rtype: float
        """
        return self._sale_price10

    @sale_price10.setter
    def sale_price10(self, sale_price10):
        """Sets the sale_price10 of this Position.

        Price for customers of group 10 in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :param sale_price10: The sale_price10 of this Position.  # noqa: E501
        :type: float
        """

        self._sale_price10 = sale_price10

    @property
    def cost_price(self):
        """Gets the cost_price of this Position.  # noqa: E501

        Price in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :return: The cost_price of this Position.  # noqa: E501
        :rtype: float
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this Position.

        Price in cents (e.g. \"150\" = 1.50€)  # noqa: E501

        :param cost_price: The cost_price of this Position.  # noqa: E501
        :type: float
        """

        self._cost_price = cost_price

    @property
    def export_cost1(self):
        """Gets the export_cost1 of this Position.  # noqa: E501


        :return: The export_cost1 of this Position.  # noqa: E501
        :rtype: str
        """
        return self._export_cost1

    @export_cost1.setter
    def export_cost1(self, export_cost1):
        """Sets the export_cost1 of this Position.


        :param export_cost1: The export_cost1 of this Position.  # noqa: E501
        :type: str
        """

        self._export_cost1 = export_cost1

    @property
    def export_cost2(self):
        """Gets the export_cost2 of this Position.  # noqa: E501


        :return: The export_cost2 of this Position.  # noqa: E501
        :rtype: str
        """
        return self._export_cost2

    @export_cost2.setter
    def export_cost2(self, export_cost2):
        """Sets the export_cost2 of this Position.


        :param export_cost2: The export_cost2 of this Position.  # noqa: E501
        :type: str
        """

        self._export_cost2 = export_cost2

    @property
    def group_id(self):
        """Gets the group_id of this Position.  # noqa: E501


        :return: The group_id of this Position.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Position.


        :param group_id: The group_id of this Position.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def stock(self):
        """Gets the stock of this Position.  # noqa: E501

        Activates stock management for this position  # noqa: E501

        :return: The stock of this Position.  # noqa: E501
        :rtype: str
        """
        return self._stock

    @stock.setter
    def stock(self, stock):
        """Sets the stock of this Position.

        Activates stock management for this position  # noqa: E501

        :param stock: The stock of this Position.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES", "NO"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and stock not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `stock` ({0}), must be one of {1}"  # noqa: E501
                .format(stock, allowed_values)
            )

        self._stock = stock

    @property
    def stock_count(self):
        """Gets the stock_count of this Position.  # noqa: E501

        Current stock count  # noqa: E501

        :return: The stock_count of this Position.  # noqa: E501
        :rtype: int
        """
        return self._stock_count

    @stock_count.setter
    def stock_count(self, stock_count):
        """Sets the stock_count of this Position.

        Current stock count  # noqa: E501

        :param stock_count: The stock_count of this Position.  # noqa: E501
        :type: int
        """

        self._stock_count = stock_count

    @property
    def stock_limit_notify(self):
        """Gets the stock_limit_notify of this Position.  # noqa: E501

        Notify when stock_count is lower than stock_limit  # noqa: E501

        :return: The stock_limit_notify of this Position.  # noqa: E501
        :rtype: bool
        """
        return self._stock_limit_notify

    @stock_limit_notify.setter
    def stock_limit_notify(self, stock_limit_notify):
        """Sets the stock_limit_notify of this Position.

        Notify when stock_count is lower than stock_limit  # noqa: E501

        :param stock_limit_notify: The stock_limit_notify of this Position.  # noqa: E501
        :type: bool
        """

        self._stock_limit_notify = stock_limit_notify

    @property
    def stock_limit(self):
        """Gets the stock_limit of this Position.  # noqa: E501


        :return: The stock_limit of this Position.  # noqa: E501
        :rtype: int
        """
        return self._stock_limit

    @stock_limit.setter
    def stock_limit(self, stock_limit):
        """Sets the stock_limit of this Position.


        :param stock_limit: The stock_limit of this Position.  # noqa: E501
        :type: int
        """

        self._stock_limit = stock_limit

    @property
    def quantity(self):
        """Gets the quantity of this Position.  # noqa: E501

        Used as the default quantity when adding this position to a document  # noqa: E501

        :return: The quantity of this Position.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Position.

        Used as the default quantity when adding this position to a document  # noqa: E501

        :param quantity: The quantity of this Position.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Position):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Position):
            return True

        return self.to_dict() != other.to_dict()
