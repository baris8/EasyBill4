# coding: utf-8

"""
    easybill REST API

     The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.  # noqa: E501

    The version of the OpenAPI document: 1.48.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Contact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'city': 'str',
        'company_name': 'str',
        'country': 'str',
        'department': 'str',
        'emails': 'list[str]',
        'fax': 'str',
        'first_name': 'str',
        'id': 'int',
        'last_name': 'str',
        'login_id': 'int',
        'mobile': 'str',
        'note': 'str',
        'personal': 'bool',
        'phone_1': 'str',
        'phone_2': 'str',
        'salutation': 'int',
        'street': 'str',
        'suffix_1': 'str',
        'suffix_2': 'str',
        'title': 'str',
        'zip_code': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'city': 'city',
        'company_name': 'company_name',
        'country': 'country',
        'department': 'department',
        'emails': 'emails',
        'fax': 'fax',
        'first_name': 'first_name',
        'id': 'id',
        'last_name': 'last_name',
        'login_id': 'login_id',
        'mobile': 'mobile',
        'note': 'note',
        'personal': 'personal',
        'phone_1': 'phone_1',
        'phone_2': 'phone_2',
        'salutation': 'salutation',
        'street': 'street',
        'suffix_1': 'suffix_1',
        'suffix_2': 'suffix_2',
        'title': 'title',
        'zip_code': 'zip_code',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, city=None, company_name=None, country=None, department='null', emails=None, fax='null', first_name='null', id=None, last_name='null', login_id=None, mobile='null', note='null', personal=False, phone_1='null', phone_2='null', salutation=None, street=None, suffix_1='null', suffix_2='null', title='null', zip_code='null', created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """Contact - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._city = None
        self._company_name = None
        self._country = None
        self._department = None
        self._emails = None
        self._fax = None
        self._first_name = None
        self._id = None
        self._last_name = None
        self._login_id = None
        self._mobile = None
        self._note = None
        self._personal = None
        self._phone_1 = None
        self._phone_2 = None
        self._salutation = None
        self._street = None
        self._suffix_1 = None
        self._suffix_2 = None
        self._title = None
        self._zip_code = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        self.city = city
        self.company_name = company_name
        if country is not None:
            self.country = country
        self.department = department
        if emails is not None:
            self.emails = emails
        self.fax = fax
        self.first_name = first_name
        if id is not None:
            self.id = id
        self.last_name = last_name
        if login_id is not None:
            self.login_id = login_id
        self.mobile = mobile
        self.note = note
        if personal is not None:
            self.personal = personal
        self.phone_1 = phone_1
        self.phone_2 = phone_2
        if salutation is not None:
            self.salutation = salutation
        self.street = street
        self.suffix_1 = suffix_1
        self.suffix_2 = suffix_2
        self.title = title
        self.zip_code = zip_code
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def city(self):
        """Gets the city of this Contact.  # noqa: E501


        :return: The city of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Contact.


        :param city: The city of this Contact.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and city is None:  # noqa: E501
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def company_name(self):
        """Gets the company_name of this Contact.  # noqa: E501


        :return: The company_name of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Contact.


        :param company_name: The company_name of this Contact.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def country(self):
        """Gets the country of this Contact.  # noqa: E501

        Two-letter country code  # noqa: E501

        :return: The country of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Contact.

        Two-letter country code  # noqa: E501

        :param country: The country of this Contact.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def department(self):
        """Gets the department of this Contact.  # noqa: E501


        :return: The department of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this Contact.


        :param department: The department of this Contact.  # noqa: E501
        :type: str
        """

        self._department = department

    @property
    def emails(self):
        """Gets the emails of this Contact.  # noqa: E501


        :return: The emails of this Contact.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this Contact.


        :param emails: The emails of this Contact.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def fax(self):
        """Gets the fax of this Contact.  # noqa: E501


        :return: The fax of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this Contact.


        :param fax: The fax of this Contact.  # noqa: E501
        :type: str
        """

        self._fax = fax

    @property
    def first_name(self):
        """Gets the first_name of this Contact.  # noqa: E501


        :return: The first_name of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Contact.


        :param first_name: The first_name of this Contact.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this Contact.  # noqa: E501


        :return: The id of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Contact.


        :param id: The id of this Contact.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this Contact.  # noqa: E501


        :return: The last_name of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Contact.


        :param last_name: The last_name of this Contact.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def login_id(self):
        """Gets the login_id of this Contact.  # noqa: E501


        :return: The login_id of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._login_id

    @login_id.setter
    def login_id(self, login_id):
        """Sets the login_id of this Contact.


        :param login_id: The login_id of this Contact.  # noqa: E501
        :type: int
        """

        self._login_id = login_id

    @property
    def mobile(self):
        """Gets the mobile of this Contact.  # noqa: E501


        :return: The mobile of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this Contact.


        :param mobile: The mobile of this Contact.  # noqa: E501
        :type: str
        """

        self._mobile = mobile

    @property
    def note(self):
        """Gets the note of this Contact.  # noqa: E501


        :return: The note of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Contact.


        :param note: The note of this Contact.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def personal(self):
        """Gets the personal of this Contact.  # noqa: E501


        :return: The personal of this Contact.  # noqa: E501
        :rtype: bool
        """
        return self._personal

    @personal.setter
    def personal(self, personal):
        """Sets the personal of this Contact.


        :param personal: The personal of this Contact.  # noqa: E501
        :type: bool
        """

        self._personal = personal

    @property
    def phone_1(self):
        """Gets the phone_1 of this Contact.  # noqa: E501


        :return: The phone_1 of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._phone_1

    @phone_1.setter
    def phone_1(self, phone_1):
        """Sets the phone_1 of this Contact.


        :param phone_1: The phone_1 of this Contact.  # noqa: E501
        :type: str
        """

        self._phone_1 = phone_1

    @property
    def phone_2(self):
        """Gets the phone_2 of this Contact.  # noqa: E501


        :return: The phone_2 of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._phone_2

    @phone_2.setter
    def phone_2(self, phone_2):
        """Sets the phone_2 of this Contact.


        :param phone_2: The phone_2 of this Contact.  # noqa: E501
        :type: str
        """

        self._phone_2 = phone_2

    @property
    def salutation(self):
        """Gets the salutation of this Contact.  # noqa: E501

        0: empty<br/> 1: Herrn<br/> 2: Frau<br/> 3: Firma<br/> 4: Herrn und Frau<br/> 5: Eheleute<br/> 6: Familie  # noqa: E501

        :return: The salutation of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._salutation

    @salutation.setter
    def salutation(self, salutation):
        """Sets the salutation of this Contact.

        0: empty<br/> 1: Herrn<br/> 2: Frau<br/> 3: Firma<br/> 4: Herrn und Frau<br/> 5: Eheleute<br/> 6: Familie  # noqa: E501

        :param salutation: The salutation of this Contact.  # noqa: E501
        :type: int
        """

        self._salutation = salutation

    @property
    def street(self):
        """Gets the street of this Contact.  # noqa: E501


        :return: The street of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Contact.


        :param street: The street of this Contact.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and street is None:  # noqa: E501
            raise ValueError("Invalid value for `street`, must not be `None`")  # noqa: E501

        self._street = street

    @property
    def suffix_1(self):
        """Gets the suffix_1 of this Contact.  # noqa: E501


        :return: The suffix_1 of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._suffix_1

    @suffix_1.setter
    def suffix_1(self, suffix_1):
        """Sets the suffix_1 of this Contact.


        :param suffix_1: The suffix_1 of this Contact.  # noqa: E501
        :type: str
        """

        self._suffix_1 = suffix_1

    @property
    def suffix_2(self):
        """Gets the suffix_2 of this Contact.  # noqa: E501


        :return: The suffix_2 of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._suffix_2

    @suffix_2.setter
    def suffix_2(self, suffix_2):
        """Sets the suffix_2 of this Contact.


        :param suffix_2: The suffix_2 of this Contact.  # noqa: E501
        :type: str
        """

        self._suffix_2 = suffix_2

    @property
    def title(self):
        """Gets the title of this Contact.  # noqa: E501


        :return: The title of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Contact.


        :param title: The title of this Contact.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def zip_code(self):
        """Gets the zip_code of this Contact.  # noqa: E501


        :return: The zip_code of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this Contact.


        :param zip_code: The zip_code of this Contact.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    @property
    def created_at(self):
        """Gets the created_at of this Contact.  # noqa: E501


        :return: The created_at of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Contact.


        :param created_at: The created_at of this Contact.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Contact.  # noqa: E501


        :return: The updated_at of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Contact.


        :param updated_at: The updated_at of this Contact.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Contact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Contact):
            return True

        return self.to_dict() != other.to_dict()
